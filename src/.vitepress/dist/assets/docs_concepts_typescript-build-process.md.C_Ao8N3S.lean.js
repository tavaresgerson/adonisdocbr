import{_ as e,c as a,a2 as i,o}from"./chunks/framework.Dz7_3PEu.js";const u=JSON.parse('{"title":"Processo de construção do TypeScript","description":"","frontmatter":{"summary":"Aprenda sobre o processo de construção do TypeScript no AdonisJS"},"headers":[],"relativePath":"docs/concepts/typescript-build-process.md","filePath":"docs/concepts/typescript-build-process.md"}'),n={name:"docs/concepts/typescript-build-process.md"};function t(d,s,r,p,l,c){return o(),a("div",null,s[0]||(s[0]=[i(`<h1 id="processo-de-construcao-do-typescript" tabindex="-1">Processo de construção do TypeScript <a class="header-anchor" href="#processo-de-construcao-do-typescript" aria-label="Permalink to &quot;Processo de construção do TypeScript&quot;">​</a></h1><p>Aplicativos escritos em TypeScript devem ser compilados em JavaScript antes que você possa executá-los em produção.</p><p>A compilação de arquivos de origem do TypeScript pode ser realizada usando muitas ferramentas de construção diferentes. No entanto, com o AdonisJS, seguimos a abordagem mais direta e usamos as seguintes ferramentas testadas pelo tempo.</p><div class="info custom-block"><p class="custom-block-title">NOTA</p><p>Todas as ferramentas mencionadas abaixo vêm pré-instaladas como dependências de desenvolvimento com kits iniciais oficiais.</p></div><p><a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noreferrer">TSC</a>** é o compilador oficial do TypeScript. Usamos o TSC para executar a verificação de tipos e criar a construção de produção.</p><p><a href="https://typestrong.org/ts-node/" target="_blank" rel="noreferrer">TS Node</a>** é um compilador Just-in-Time para TypeScript. Ele permite que você execute arquivos TypeScript sem compilá-los para JavaScript e prova ser uma ótima ferramenta para desenvolvimento.</p><p><a href="https://swc.rs/" target="_blank" rel="noreferrer">SWC</a>** é um compilador TypeScript escrito em Rust. Nós o usamos durante o desenvolvimento com o TS Node para tornar o processo JIT extremamente rápido.</p><table tabindex="0"><thead><tr><th>Ferramenta</th><th>Usado para</th><th>Verificação de tipo</th></tr></thead><tbody><tr><td><code>TSC</code></td><td>Criando build de produção</td><td>Yes</td></tr><tr><td><code>TS Node</code></td><td>Desenvolvimento</td><td>No</td></tr><tr><td><code>SWC</code></td><td>Desenvolvimento</td><td>No</td></tr></tbody></table><h2 id="executando-arquivos-typescript-sem-compilacao" tabindex="-1">Executando arquivos TypeScript sem compilação <a class="header-anchor" href="#executando-arquivos-typescript-sem-compilacao" aria-label="Permalink to &quot;Executando arquivos TypeScript sem compilação&quot;">​</a></h2><p>Você pode executar os arquivos TypeScript sem compilá-los usando o carregador <code>ts-node/esm</code>. Por exemplo, você pode iniciar o servidor HTTP executando o seguinte comando.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --loader=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts-node/esm&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin/server.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><a href="https://nodejs.org/dist/latest-v21.x/docs/api/esm.html#loaders" target="_blank" rel="noreferrer">API Node.js</a>.</p><ul><li><code>ts-node/esm</code>: O caminho para o script <code>ts-node/esm</code> que registra ganchos de ciclo de vida para executar a compilação Just-in-Time da fonte TypeScript para JavaScript.</li></ul><p><a href="#a-note-on-file-extensions">Uma nota sobre extensões de arquivo</a>**</p><p>Você pode repetir esse processo para outros arquivos TypeScript também. Por exemplo:</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Executar testes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --loader</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts-node/esm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin/test.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Executar comandos ace</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --loader</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts-node/esm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin/console.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Executar algum outro arquivo TypeScript</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --loader</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts-node/esm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> path/to/file.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="uma-observacao-sobre-extensoes-de-arquivo" tabindex="-1">Uma observação sobre extensões de arquivo <a class="header-anchor" href="#uma-observacao-sobre-extensoes-de-arquivo" aria-label="Permalink to &quot;Uma observação sobre extensões de arquivo&quot;">​</a></h3><p>Você pode ter notado que usamos a extensão de arquivo <code>.js</code> em todos os lugares, mesmo que o arquivo no disco seja salvo com a extensão de arquivo <code>.ts</code>.</p><p>Isso ocorre porque, com módulos ES, o TypeScript força você a usar a extensão <code>.js</code> em importações e ao executar scripts. Você pode aprender sobre a tese por trás dessa escolha na <a href="https://www.typescriptlang.org/docs/handbook/modules/theory.html#typescript-imitates-the-hosts-module-resolution-but-with-types" target="_blank" rel="noreferrer">documentação do TypeScript</a>.</p><h2 id="executando-o-servidor-de-desenvolvimento" tabindex="-1">Executando o servidor de desenvolvimento <a class="header-anchor" href="#executando-o-servidor-de-desenvolvimento" aria-label="Permalink to &quot;Executando o servidor de desenvolvimento&quot;">​</a></h2><p>Em vez de executar o arquivo <code>bin/server.js</code> diretamente, recomendamos usar o comando <code>serve</code> pelos seguintes motivos.</p><ul><li>O comando inclui um observador de arquivo e reinicia o servidor de desenvolvimento na alteração do arquivo.</li><li>O comando <code>serve</code> detecta o empacotador de ativos de frontend que seu aplicativo está usando e inicia seu servidor de desenvolvimento. Por exemplo, se você tiver um arquivo <code>vite.config.js</code> na raiz do seu projeto, o comando <code>serve</code> iniciará o servidor de desenvolvimento <code>vite</code>.</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serve</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --watch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Você pode passar argumentos para o servidor de desenvolvimento Vite usando o sinalizador de linha de comando <code>--assets-args</code>.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serve</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --watch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --assets-args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--debug --base=/public&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Você pode usar o sinalizador <code>--no-assets</code> para desabilitar o servidor de desenvolvimento Vite.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serve</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --watch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-assets</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="passando-opcoes-para-a-linha-de-comando-node-js" tabindex="-1">Passando opções para a linha de comando Node.js <a class="header-anchor" href="#passando-opcoes-para-a-linha-de-comando-node-js" aria-label="Permalink to &quot;Passando opções para a linha de comando Node.js&quot;">​</a></h3><p>O comando <code>serve</code> inicia o servidor de desenvolvimento <code>(arquivo bin/server.ts)</code> como um processo filho. Se você quiser passar <a href="https://nodejs.org/api/cli.html#options" target="_blank" rel="noreferrer">argumentos do nó</a> para o processo filho, você pode defini-los antes do nome do comando.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-warnings</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --inspect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serve</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --watch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="criando-build-de-producao" tabindex="-1">Criando build de produção <a class="header-anchor" href="#criando-build-de-producao" aria-label="Permalink to &quot;Criando build de produção&quot;">​</a></h2><p>O build de produção do seu aplicativo AdonisJS é criado usando o comando <code>node ace build</code>. O comando <code>build</code> executa as seguintes operações para criar um <a href="#what-is-a-standalone-build"><strong>aplicativo JavaScript autônomo</strong></a> dentro do diretório <code>./build</code>.</p><ul><li>Remova a pasta <code>./build</code> existente (se houver).</li><li>Reescreva o arquivo <code>ace.js</code> <strong>do zero</strong> para remover o carregador <code>ts-node/esm</code>.</li><li>Compile os ativos do frontend usando o Vite (se configurado).</li><li><a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noreferrer"><code>tsc</code></a>.</li><li><a href="./../concepts/adonisrc_file.html#metafiles"><code>metaFiles</code></a> array para a pasta <code>./build</code>.</li><li>Copie os arquivos <code>package.json</code> e <code>package-lock.json/yarn.lock</code> para a pasta <code>./build</code>.</li></ul><div class="warning custom-block"><p class="custom-block-title">ATENÇÃO</p><p>Quaisquer modificações no arquivo <code>ace.js</code> serão perdidas durante o processo de build, pois o arquivo é reescrito do zero. Se você quiser ter algum código adicional que seja executado antes do Ace iniciar, você deve fazê-lo dentro do arquivo <code>bin/console.ts</code>.</p></div><p>E isso é tudo!</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Depois que o build for criado, você pode <code>cd</code> para a pasta <code>build</code>, instalar dependências de produção e executar seu aplicativo.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Instalar dependências de produção</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --omit=dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Executar servidor</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin/server.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Você pode passar argumentos para o comando de compilação do Vite usando o sinalizador de linha de comando <code>--assets-args</code>.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --assets-args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--debug --base=/public&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Você pode usar o sinalizador <code>--no-assets</code> para evitar compilar os ativos do frontend.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-assets</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="o-que-e-uma-compilacao-autonoma" tabindex="-1">O que é uma compilação autônoma? <a class="header-anchor" href="#o-que-e-uma-compilacao-autonoma" aria-label="Permalink to &quot;O que é uma compilação autônoma?&quot;">​</a></h3><p>A compilação autônoma se refere à saída JavaScript do seu aplicativo que você pode executar sem a fonte TypeScript original.</p><p>A criação de uma compilação autônoma ajuda a reduzir o tamanho do código que você implanta no seu servidor de produção, pois você não precisa copiar os arquivos de origem e a saída JavaScript.</p><p>Após criar a compilação de produção, você pode copiar o <code>./build</code> para o seu servidor de produção, instalar dependências, definir variáveis ​​de ambiente e executar o aplicativo.</p>`,48)]))}const m=e(n,[["render",t]]);export{u as __pageData,m as default};
