import{_ as s,c as a,o as i,a4 as e}from"./chunks/framework.nQaBHiNx.js";const g=JSON.parse('{"title":"Proteção CSRF","description":"","frontmatter":{},"headers":[],"relativePath":"docs/09-security/03-csrf-protection.md","filePath":"docs/09-security/03-csrf-protection.md"}'),t={name:"docs/09-security/03-csrf-protection.md"},n=e(`<h1 id="protecao-csrf" tabindex="-1">Proteção CSRF <a class="header-anchor" href="#protecao-csrf" aria-label="Permalink to &quot;Proteção CSRF&quot;">​</a></h1><p>O Cross-Site Request Forgery (CSRF) permite que um invasor execute ações em nome de outro usuário sem o conhecimento ou permissão deste último.</p><p>O AdonisJs protege seu aplicativo de ataques CSRF negando solicitações não identificadas. Solicitações HTTP com métodos <em>POST</em>, <em>PUT</em> e <em>DELETE</em> são verificadas para garantir que essas solicitações sejam invocadas pelas pessoas certas do lugar certo. Você pode aprender mais sobre o CSRF <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery" target="_blank" rel="noreferrer">aqui</a></p><h2 id="como-funciona" tabindex="-1">Como funciona? <a class="header-anchor" href="#como-funciona" aria-label="Permalink to &quot;Como funciona?&quot;">​</a></h2><ol><li>O AdonisJs criará uma <em>sessão CSRF</em> para cada usuário que visitar seu site. Em seguida, um <em>token CSRF</em> é gerado para a sessão previamente criada. Por motivos de segurança, o token será regerado sempre que a página for atualizada.</li></ol><ul><li></li></ul><p>O token gerado pode ser acessado dentro das views como &#39;csrfToken&#39; ou &#39;csrfField&#39;, para que você possa passar esse token ao enviar formulários HTML.</p><ol><li>Além disso, o mesmo token é definido em um cookie com a chave &#39;XSRF-TOKEN&#39;. Os frameworks front-end como <em>AngularJS</em> leem automaticamente este cookie e o enviam junto com cada solicitação Ajax.</li><li>Finalmente, quando uma solicitação <em>POST</em>, <em>PUT</em> ou <em>DELETE</em> chega, o middleware verificará o token com o segredo para garantir que ele seja válido. Ele tentará acessar o token das seguintes fontes.</li></ol><ul><li><code>csrf</code> no corpo da requisição.</li><li>Também tentará acessar os cabeçalhos <em>csrf-token</em>, <em>x-csrf-token</em> ou <em>x-xsrf-token</em>.</li></ul><h2 id="configuracao" tabindex="-1">Configuração <a class="header-anchor" href="#configuracao" aria-label="Permalink to &quot;Configuração&quot;">​</a></h2><p>A configuração para CSRF é salva dentro do arquivo <code>config/shield.js</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">csrf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  enable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;PUT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DELETE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  filterUris</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/user/:id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>| Chave | Valor | Descrição | | ativar | Boolean | Um booleano para ativar/desativar o CSRF para todo o aplicativo. | | métodos | Array | Verbos HTTP a serem protegidos por CSRF. Considere adicionar todos os verbos que permitem ao usuário final adicionar ou modificar dados. | | filterUris | Array | Uma lista de URLs/Rotas para ignorar. Você pode passar a definição real das rotas ou uma expressão regular para combinar. |</p><h2 id="acessando-o-token-csrf" tabindex="-1">Acessando o token CSRF <a class="header-anchor" href="#acessando-o-token-csrf" aria-label="Permalink to &quot;Acessando o token CSRF&quot;">​</a></h2><p>Para enviar o token junto com cada requisição, você precisa acessá-lo. Existem algumas maneiras de obter acesso ao token CSRF.</p><h4 id="csrffield" tabindex="-1">csrfField <a class="header-anchor" href="#csrffield" aria-label="Permalink to &quot;csrfField&quot;">​</a></h4><div class="language-twig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">twig</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ csrfField }}</span></span></code></pre></div><p>Saída:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hidden&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_csrf&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxxxxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="csrftoken" tabindex="-1">csrfToken <a class="header-anchor" href="#csrftoken" aria-label="Permalink to &quot;csrfToken&quot;">​</a></h4><div class="language-twig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">twig</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ csrfToken }}</span></span></code></pre></div><p>Você também pode acessar o token dentro de seus controladores e ações da rota como a seguir.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">csrfToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="tratando-erros-csrf" tabindex="-1">Tratando erros CSRF <a class="header-anchor" href="#tratando-erros-csrf" aria-label="Permalink to &quot;Tratando erros CSRF&quot;">​</a></h2><p>Em caso de falha na validação, é lançada uma exceção chamada <em>EBADCSRFTOKEN</em>, que pode ser tratada no arquivo <code>app/Listeners/Http.js</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app/Listeners/Http.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;EBADCSRFTOKEN&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forbidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;You cannot access this resource.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,26),o=[n];function r(l,p,h,d,k,c){return i(),a("div",null,o)}const u=s(t,[["render",r]]);export{g as __pageData,u as default};
