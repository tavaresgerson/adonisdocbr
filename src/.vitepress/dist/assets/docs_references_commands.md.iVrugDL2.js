import{_ as a}from"./chunks/ace_help_screen.BolvydYK.js";import{_ as s}from"./chunks/vscode_routes_list.DzCp99s0.js";import{_ as i,c as o,a2 as n,o as d}from"./chunks/framework.Dz7_3PEu.js";const b=JSON.parse('{"title":"Referência de comandos","description":"","frontmatter":{"resumo":"Aprenda sobre os comandos enviados com o núcleo do framework AdonisJS e pacotes oficiais."},"headers":[],"relativePath":"docs/references/commands.md","filePath":"docs/references/commands.md"}'),r={name:"docs/references/commands.md"};function l(t,e,p,c,h,u){return d(),o("div",null,e[0]||(e[0]=[n('<h1 id="referencia-de-comandos" tabindex="-1">Referência de comandos <a class="header-anchor" href="#referencia-de-comandos" aria-label="Permalink to &quot;Referência de comandos&quot;">​</a></h1><p>Neste guia, abordamos o uso de todos os comandos enviados com o núcleo do framework e os pacotes oficiais. Você também pode visualizar a ajuda dos comandos usando o comando <code>node ace list</code> ou o comando <code>node ace &lt;command-name&gt; --help</code>.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+a+'" alt=""></p><div class="info custom-block"><p class="custom-block-title">NOTA</p><p>A saída da tela de ajuda é formatada de acordo com o padrão <a href="http://docopt.org/" target="_blank" rel="noreferrer">docopt</a>.</p></div><h2 id="serve" tabindex="-1"><code>serve</code> <a class="header-anchor" href="#serve" aria-label="Permalink to &quot;`serve`&quot;">​</a></h2><p>O <code>serve</code> usa o pacote <a href="https://github.com/adonisjs/assembler?tab=readme-ov-file#dev-server" target="_blank" rel="noreferrer">@adonisjs/assembler</a> para iniciar o aplicativo AdonisJS no ambiente de desenvolvimento. Opcionalmente, você pode observar as alterações de arquivo e reiniciar o servidor HTTP em cada alteração de arquivo.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serve</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hmr</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>O comando <code>serve</code> inicia o servidor de desenvolvimento (por meio do arquivo <code>bin/server.ts</code>) como um processo filho. Se você quiser passar <a href="https://nodejs.org/api/cli.html#options" target="_blank" rel="noreferrer">argumentos do nó</a> para o processo filho, você pode defini-los antes do nome do comando.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-warnings</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --inspect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serve</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hmr</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>A seguir está a lista de opções disponíveis que você pode passar para o comando <code>serve</code>. Como alternativa, use o sinalizador <code>--help</code> para visualizar a ajuda do comando.</p><h3 id="hmr" tabindex="-1"><code>--hmr</code> <a class="header-anchor" href="#hmr" aria-label="Permalink to &quot;`--hmr`&quot;">​</a></h3><p>Observe o sistema de arquivos e recarregue o servidor no modo HMR.</p><h3 id="watch" tabindex="-1"><code>--watch</code> <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;`--watch`&quot;">​</a></h3><p>Observe o sistema de arquivos e sempre reinicie o processo na alteração do arquivo.</p><h3 id="poll" tabindex="-1"><code>--poll</code> <a class="header-anchor" href="#poll" aria-label="Permalink to &quot;`--poll`&quot;">​</a></h3><p>Use a pesquisa para detectar alterações no sistema de arquivos. Você pode querer usar polling ao usar um contêiner Docker para desenvolvimento.</p><h3 id="clear-no-clear" tabindex="-1"><code>--clear</code> | <code>--no-clear</code> <a class="header-anchor" href="#clear-no-clear" aria-label="Permalink to &quot;`--clear` | `--no-clear`&quot;">​</a></h3><p>Limpe o terminal após cada alteração de arquivo e antes de exibir os novos logs. Use o sinalizador <code>--no-clear</code> para reter logs antigos.</p><h3 id="assets-no-assets" tabindex="-1"><code>--assets</code> | <code>--no-assets</code> <a class="header-anchor" href="#assets-no-assets" aria-label="Permalink to &quot;`--assets` | `--no-assets`&quot;">​</a></h3><p>Inicie o servidor de desenvolvimento do pacote de ativos junto com o servidor HTTP AdonisJS. Use o sinalizador <code>--no-assets</code> para desligar o servidor de desenvolvimento do pacote de ativos.</p><h3 id="assets-args" tabindex="-1"><code>--assets-args</code> <a class="header-anchor" href="#assets-args" aria-label="Permalink to &quot;`--assets-args`&quot;">​</a></h3><p>Passe argumentos de linha de comando para o processo filho do gerenciador de ativos. Por exemplo, se você usar o vite, poderá definir suas opções da seguinte forma.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serve</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hmr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --assets-args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--cors --open&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="build" tabindex="-1"><code>build</code> <a class="header-anchor" href="#build" aria-label="Permalink to &quot;`build`&quot;">​</a></h2><p>O comando <code>build</code> usa o pacote <a href="https://github.com/adonisjs/assembler?tab=readme-ov-file#bundler" target="_blank" rel="noreferrer">@adonisjs/assembler</a> para criar a compilação de produção do seu aplicativo AdonisJS. As etapas a seguir são executadas para gerar a compilação.</p><p>Veja também: <a href="./../concepts/typescript_build_process.html">Processo de compilação TypeScript</a>.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>A seguir está a lista de opções disponíveis que você pode passar para o comando <code>build</code>. Como alternativa, use o sinalizador <code>--help</code> para visualizar a ajuda do comando.</p><h3 id="ignore-ts-errors" tabindex="-1"><code>--ignore-ts-errors</code> <a class="header-anchor" href="#ignore-ts-errors" aria-label="Permalink to &quot;`--ignore-ts-errors`&quot;">​</a></h3><p>O comando build encerra o processo de compilação quando seu projeto tem erros TypeScript. No entanto, você pode ignorar esses erros e finalizar a compilação usando o sinalizador <code>--ignore-ts-errors</code>.</p><h3 id="package-manager" tabindex="-1"><code>--package-manager</code> <a class="header-anchor" href="#package-manager" aria-label="Permalink to &quot;`--package-manager`&quot;">​</a></h3><p>O comando build copia o arquivo <code>package.json</code> junto com o arquivo de bloqueio do gerenciador de pacotes que seu aplicativo está usando.</p><p>Detectamos o gerenciador de pacotes usando o pacote <a href="https://github.com/antfu/install-pkg" target="_blank" rel="noreferrer">@antfu/install-pkg</a>. No entanto, você pode desativar a detecção fornecendo explicitamente o nome do gerenciador de pacotes.</p><h3 id="assets-no-assets-1" tabindex="-1"><code>--assets</code> | <code>--no-assets</code> <a class="header-anchor" href="#assets-no-assets-1" aria-label="Permalink to &quot;`--assets` | `--no-assets`&quot;">​</a></h3><p>Agrupe os ativos de front-end junto com seu aplicativo de back-end. Use o sinalizador <code>--no-assets</code> para desativar o servidor de desenvolvimento do bundler de ativos.</p><h3 id="assets-args-1" tabindex="-1"><code>--assets-args</code> <a class="header-anchor" href="#assets-args-1" aria-label="Permalink to &quot;`--assets-args`&quot;">​</a></h3><p>Passe argumentos de linha de comando para o processo filho do gerenciador de ativos. Por exemplo, se você usar o vite, poderá definir suas opções da seguinte forma.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --assets-args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--sourcemap --debug&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="add" tabindex="-1"><code>add</code> <a class="header-anchor" href="#add" aria-label="Permalink to &quot;`add`&quot;">​</a></h2><p>O comando <code>add</code> combina os comandos <code>npm install &lt;package-name&gt;</code> e <code>node ace configure</code>. Então, em vez de executar dois comandos separados, você pode instalar e configurar o pacote de uma só vez usando o comando <code>add</code>.</p><p>O comando <code>add</code> detectará automaticamente o gerenciador de pacotes usado pelo seu aplicativo e o usará para instalar o pacote. No entanto, você sempre pode optar por um gerenciador de pacotes específico usando o sinalizador CLI <code>--package-manager</code>.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Instalar e configurar o pacote @adonisjs/lucid</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @adonisjs/lucid</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Instalar o pacote como uma dependência de desenvolvimento e configurá-lo</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-dev-package</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Se o pacote puder ser configurado usando sinalizadores, você pode passá-los diretamente para o comando <code>add</code>. Cada sinalizador desconhecido será passado para o comando <code>configure</code>.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @adonisjs/lucid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --db=sqlite</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="verbose" tabindex="-1"><code>--verbose</code> <a class="header-anchor" href="#verbose" aria-label="Permalink to &quot;`--verbose`&quot;">​</a></h3><p>Habilite o modo detalhado para exibir os logs de instalação e configuração do pacote.</p><h3 id="force" tabindex="-1"><code>--force</code> <a class="header-anchor" href="#force" aria-label="Permalink to &quot;`--force`&quot;">​</a></h3><p>Passado para o comando <code>configure</code>. Força a substituição de arquivos ao configurar o pacote. Veja o comando <code>configure</code> para mais informações.</p><h3 id="package-manager-1" tabindex="-1"><code>--package-manager</code> <a class="header-anchor" href="#package-manager-1" aria-label="Permalink to &quot;`--package-manager`&quot;">​</a></h3><p>Defina o gerenciador de pacotes a ser usado para instalar o pacote. O valor deve ser <code>npm</code>, <code>pnpm</code>, <code>bun</code> ou <code>yarn</code>.</p><h3 id="dev" tabindex="-1"><code>--dev</code> <a class="header-anchor" href="#dev" aria-label="Permalink to &quot;`--dev`&quot;">​</a></h3><p>Instale o pacote como uma dependência de desenvolvimento.</p><h2 id="configure" tabindex="-1"><code>configure</code> <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;`configure`&quot;">​</a></h2><p>Configure um pacote após ele ter sido instalado. O comando aceita o nome do pacote como o primeiro argumento.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configure</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @adonisjs/lucid</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="verbose-1" tabindex="-1"><code>--verbose</code> <a class="header-anchor" href="#verbose-1" aria-label="Permalink to &quot;`--verbose`&quot;">​</a></h3><p>Habilite o modo detalhado para exibir os logs de instalação do pacote.</p><h3 id="force-1" tabindex="-1"><code>--force</code> <a class="header-anchor" href="#force-1" aria-label="Permalink to &quot;`--force`&quot;">​</a></h3><p>O sistema stubs do AdonisJS não sobrescreve arquivos existentes. Por exemplo, se você configurar o pacote <code>@adonisjs/lucid</code> e seu aplicativo já tiver um arquivo <code>config/database.ts</code>, o processo de configuração não sobrescreverá o arquivo de configuração existente.</p><p>No entanto, você pode forçar a sobreposição de arquivos usando o sinalizador <code>--force</code>.</p><h2 id="eject" tabindex="-1"><code>eject</code> <a class="header-anchor" href="#eject" aria-label="Permalink to &quot;`eject`&quot;">​</a></h2><p>Ejeta stubs de um determinado pacote para o diretório <code>stubs</code> do seu aplicativo. No exemplo a seguir, copiamos os stubs <code>make/controller</code> para nosso aplicativo para modificação.</p><p>Veja também: <a href="./../concepts/scaffolding.html#ejecting-stubs">Personalizando stubs</a></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Copiar stub do pacote @adonisjs/core</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eject</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make/controller</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Copiar stub do pacote @adonisjs/bouncer</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eject</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make/policy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pkg=@adonisjs/bouncer</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="generate-key" tabindex="-1"><code>generate:key</code> <a class="header-anchor" href="#generate-key" aria-label="Permalink to &quot;`generate:key`&quot;">​</a></h2><p>Gere uma chave aleatória criptograficamente segura e grave no arquivo <code>.env</code> como a variável de ambiente <code>APP_KEY</code>.</p><p>Veja também: <a href="./../security/encryption.html">Chave do aplicativo</a></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generate:key</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="show" tabindex="-1"><code>--show</code> <a class="header-anchor" href="#show" aria-label="Permalink to &quot;`--show`&quot;">​</a></h3><p>Exiba a chave no terminal em vez de gravá-la no arquivo <code>.env</code>. Por padrão, a chave é gravada no arquivo env.</p><h3 id="force-2" tabindex="-1"><code>--force</code> <a class="header-anchor" href="#force-2" aria-label="Permalink to &quot;`--force`&quot;">​</a></h3><p>O comando <code>generate:key</code> não grava a chave no arquivo <code>.env</code> ao executar seu aplicativo em produção. No entanto, você pode usar o sinalizador <code>--force</code> para substituir esse comportamento.</p><h2 id="make-controller" tabindex="-1"><code>make:controller</code> <a class="header-anchor" href="#make-controller" aria-label="Permalink to &quot;`make:controller`&quot;">​</a></h2><p>Cria uma nova classe de controlador HTTP. Os controladores são criados dentro do diretório <code>app/controllers</code> e usam as seguintes convenções de nomenclatura.</p><ul><li>Forma: <code>plural</code></li><li>Sufixo: <code>controller</code></li><li>Exemplo de nome de classe: <code>UsersController</code></li><li>Exemplo de nome de arquivo: <code>users_controller.ts</code></li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:controller</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> users</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Você também gera um controlador com nomes de ação personalizados, conforme mostrado no exemplo a seguir.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Gera controlador com métodos &quot;index&quot;, &quot;show&quot; e &quot;store&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:controller</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> users</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> store</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="singular" tabindex="-1"><code>--singular</code> <a class="header-anchor" href="#singular" aria-label="Permalink to &quot;`--singular`&quot;">​</a></h3><p>Força o nome do controlador a estar no formato singular.</p><h3 id="resource" tabindex="-1"><code>--resource</code> <a class="header-anchor" href="#resource" aria-label="Permalink to &quot;`--resource`&quot;">​</a></h3><p>Gera um controlador com métodos para executar operações CRUD em um recurso.</p><h3 id="api" tabindex="-1"><code>--api</code> <a class="header-anchor" href="#api" aria-label="Permalink to &quot;`--api`&quot;">​</a></h3><p>O sinalizador <code>--api</code> é semelhante ao sinalizador <code>--resource</code>. No entanto, ele não define os métodos <code>create</code> e <code>edit</code>, pois eles são usados ​​para exibir formulários.</p><h2 id="make-middleware" tabindex="-1"><code>make:middleware</code> <a class="header-anchor" href="#make-middleware" aria-label="Permalink to &quot;`make:middleware`&quot;">​</a></h2><p>Cria um novo middleware para solicitações HTTP. Middleware é armazenado dentro do diretório <code>app/middleware</code> e usa as seguintes convenções de nomenclatura.</p><ul><li>Formulário: <code>singular</code></li><li>Sufixo: <code>middleware</code></li><li>Exemplo de nome de classe: <code>BodyParserMiddleware</code></li><li>Exemplo de nome de arquivo: <code>body_parser_middleware.ts</code></li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:middleware</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bodyparser</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="stack" tabindex="-1"><code>--stack</code> <a class="header-anchor" href="#stack" aria-label="Permalink to &quot;`--stack`&quot;">​</a></h3><p>Pule o prompt de seleção <a href="./../basics/middleware.html#middleware-stacks">middleware stack</a> definindo a pilha explicitamente. O valor deve ser <code>server</code>, <code>named</code> ou <code>router</code>.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:middleware</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bodyparser</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stack=router</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="make-event" tabindex="-1"><code>make:event</code> <a class="header-anchor" href="#make-event" aria-label="Permalink to &quot;`make:event`&quot;">​</a></h2><p>Crie uma nova classe de evento. Os eventos são armazenados dentro do diretório <code>app/events</code> e usam as seguintes convenções de nomenclatura.</p><ul><li>Forma: <code>NA</code></li><li>Sufixo: <code>NA</code></li><li>Exemplo de nome de classe: <code>OrderShipped</code></li><li>Exemplo de nome de arquivo: <code>order_shipped.ts</code></li><li>Recomendação: Você deve nomear seus eventos em torno do ciclo de vida de uma ação. Por exemplo: <code>MailSending</code>, <code>MailSent</code>, <code>RequestCompleted</code> e assim por diante.</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:event</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> orderShipped</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="make-validator" tabindex="-1"><code>make:validator</code> <a class="header-anchor" href="#make-validator" aria-label="Permalink to &quot;`make:validator`&quot;">​</a></h2><p>Crie um novo arquivo validador VineJS. Os validadores são armazenados dentro do diretório <code>app/validators</code> e cada arquivo pode exportar vários validadores.</p><ul><li>Formulário: <code>singular</code></li><li>Sufixo: <code>NA</code></li><li>Exemplo de nome de arquivo: <code>user.ts</code></li><li>Recomendação: você deve criar arquivos validadores em torno dos recursos do seu aplicativo.</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Um validador para gerenciar um usuário</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:validator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Um validador para gerenciar uma postagem</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:validator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> post</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="resource-1" tabindex="-1"><code>--resource</code> <a class="header-anchor" href="#resource-1" aria-label="Permalink to &quot;`--resource`&quot;">​</a></h3><p>Crie um arquivo validador com validadores predefinidos para ações <code>create</code> e <code>update</code>.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:validator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> post</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --resource</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="make-listener" tabindex="-1"><code>make:listener</code> <a class="header-anchor" href="#make-listener" aria-label="Permalink to &quot;`make:listener`&quot;">​</a></h2><p>Crie uma nova classe de ouvinte de evento. As classes de ouvinte são armazenadas dentro do diretório <code>app/listeners</code> e usam as seguintes convenções de nomenclatura.</p><ul><li>Formulário: <code>NA</code></li><li>Sufixo: <code>NA</code></li><li>Exemplo de nome de classe: <code>SendShipmentNotification</code></li><li>Exemplo de nome de arquivo: <code>send_shipment_notification.ts</code></li><li>Recomendação: os ouvintes de evento devem ser nomeados após a ação que realizam. Por exemplo, um ouvinte que envia o e-mail de notificação de remessa deve ser chamado de <code>SendShipmentNotification</code>.</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:listener</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sendShipmentNotification</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="event" tabindex="-1"><code>--event</code> <a class="header-anchor" href="#event" aria-label="Permalink to &quot;`--event`&quot;">​</a></h3><p>Gere uma classe de evento junto com o ouvinte de evento.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:listener</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sendShipmentNotification</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --event=shipment_received</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="make-service" tabindex="-1"><code>make:service</code> <a class="header-anchor" href="#make-service" aria-label="Permalink to &quot;`make:service`&quot;">​</a></h2><p>Crie uma nova classe de serviço. As classes de serviço são armazenadas dentro do diretório <code>app/services</code> e usam as seguintes convenções de nomenclatura.</p><div class="info custom-block"><p class="custom-block-title">NOTA</p><p>Um serviço não tem significado predefinido, e você pode usá-lo para extrair a lógica de negócios dentro do seu aplicativo. Por exemplo, se seu aplicativo gera muitos PDFs, você pode criar um serviço chamado <code>PdfGeneratorService</code> e reutilizá-lo em vários lugares.</p></div><ul><li>Formulário: <code>singular</code></li><li>Sufixo: <code>service</code></li><li>Exemplo de nome de classe: <code>InvoiceService</code></li><li>Exemplo de nome de arquivo: <code>invoice_service.ts</code></li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> invoice</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="make-exception" tabindex="-1"><code>make:exception</code> <a class="header-anchor" href="#make-exception" aria-label="Permalink to &quot;`make:exception`&quot;">​</a></h2><p>Cria uma nova <a href="./../basics/exception_handling.html#custom-exceptions">classe de exceção personalizada</a>. As exceções são armazenadas dentro do diretório <code>app/exceptions</code>.</p><ul><li>Forma: <code>NA</code></li><li>Sufixo: <code>exception</code></li><li>Exemplo de nome de classe: <code>CommandValidationException</code></li><li>Exemplo de nome de arquivo: <code>command_validation_exception.ts</code></li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:exception</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commandValidation</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="make-command" tabindex="-1"><code>make:command</code> <a class="header-anchor" href="#make-command" aria-label="Permalink to &quot;`make:command`&quot;">​</a></h2><p>Cria um novo comando Ace. Por padrão, os comandos são armazenados dentro do diretório <code>commands</code> na raiz do seu aplicativo.</p><p>Os comandos deste diretório são importados automaticamente pelo AdonisJS quando você tenta executar qualquer comando Ace. Você pode prefixar o nome do arquivo com um <code>_</code> para armazenar arquivos adicionais que não sejam comandos Ace neste diretório.</p><ul><li>Formulário: <code>NA</code></li><li>Sufixo: <code>NA</code></li><li>Exemplo de nome de classe: <code>ListRoutes</code></li><li>Exemplo de nome de arquivo: <code>list_routes.ts</code></li><li>Recomendação: os comandos devem ser nomeados após a ação que eles executam. Por exemplo, <code>ListRoutes</code>, <code>MakeController</code> e <code>Build</code>.</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:command</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> listRoutes</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="make-view" tabindex="-1"><code>make:view</code> <a class="header-anchor" href="#make-view" aria-label="Permalink to &quot;`make:view`&quot;">​</a></h2><p>Crie um novo arquivo de modelo Edge.js. Os modelos são criados dentro do diretório <code>resources/views</code>.</p><ul><li>Formulário: <code>NA</code></li><li>Sufixo: <code>NA</code></li><li>Exemplo de nome de arquivo: <code>posts/view.edge</code></li><li>Recomendação: você deve agrupar modelos para um recurso dentro de um subdiretório. Por exemplo: <code>posts/list.edge</code>, <code>posts/create.edge</code> e assim por diante.</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:view</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> posts/create</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:view</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> posts/list</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="make-provider" tabindex="-1"><code>make:provider</code> <a class="header-anchor" href="#make-provider" aria-label="Permalink to &quot;`make:provider`&quot;">​</a></h2><p>Crie um <a href="./../concepts/service_providers.html">arquivo de provedor de serviço</a>. Os provedores são armazenados dentro do diretório <code>providers</code> na raiz do seu aplicativo e usam as seguintes convenções de nomenclatura.</p><ul><li>Forma: <code>singular</code></li><li>Sufixo: <code>provider</code></li><li>Exemplo de nome de classe: <code>AppProvider</code></li><li>Exemplo de nome de arquivo: <code>app_provider.ts</code></li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:provider</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="environments" tabindex="-1"><code>--environments</code> <a class="header-anchor" href="#environments" aria-label="Permalink to &quot;`--environments`&quot;">​</a></h3><p>Defina ambientes nos quais o provedor deve ser importado. <a href="./../concepts/application.html#environment">Saiba mais sobre ambientes de aplicativos</a></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:provider</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e=web</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e=console</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="make-preload" tabindex="-1"><code>make:preload</code> <a class="header-anchor" href="#make-preload" aria-label="Permalink to &quot;`make:preload`&quot;">​</a></h2><p>Crie um novo <a href="./../concepts/adonisrc_file.html#preloads">arquivo de pré-carregamento</a>. Os arquivos de pré-carregamento são armazenados dentro do diretório <code>start</code>.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:preload</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> view</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="environments-1" tabindex="-1"><code>--environments</code> <a class="header-anchor" href="#environments-1" aria-label="Permalink to &quot;`--environments`&quot;">​</a></h3><p>Defina ambientes nos quais o arquivo de pré-carregamento deve ser importado. <a href="./../concepts/application.html#environment">Saiba mais sobre ambientes de aplicativos</a></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:preload</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> view</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e=web</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e=console</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="make-test" tabindex="-1"><code>make:test</code> <a class="header-anchor" href="#make-test" aria-label="Permalink to &quot;`make:test`&quot;">​</a></h2><p>Crie um novo arquivo de teste dentro do diretório <code>tests/&lt;suite&gt;</code>.</p><ul><li>Formulário: NA</li><li>Sufixo: <code>.spec</code></li><li>Exemplo de nome de arquivo: <code>posts/list.spec.ts</code>, <code>posts/update.spec.ts</code></li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --suite=unit</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="suite" tabindex="-1"><code>--suite</code> <a class="header-anchor" href="#suite" aria-label="Permalink to &quot;`--suite`&quot;">​</a></h3><p>Defina o conjunto para o qual você deseja criar o arquivo de teste. Caso contrário, o comando exibirá um prompt para seleção do conjunto.</p><h2 id="make-mail" tabindex="-1"><code>make:mail</code> <a class="header-anchor" href="#make-mail" aria-label="Permalink to &quot;`make:mail`&quot;">​</a></h2><p>Crie uma nova classe de e-mail dentro do diretório <code>app/mails</code>. As classes de e-mail são sufixadas com a palavra-chave <code>Notification</code>. No entanto, você pode definir um sufixo personalizado usando o sinalizador CLI <code>--intent</code>.</p><ul><li>Formulário: NA</li><li>Sufixo: <code>Intent</code></li><li>Exemplo de nome de classe: ShipmentNotification</li><li>Exemplo de nome de arquivo: shipping_notification.ts</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:mail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shipment</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ./app/mails/shipment_notification.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="intent" tabindex="-1"><code>--intent</code> <a class="header-anchor" href="#intent" aria-label="Permalink to &quot;`--intent`&quot;">​</a></h3><p>Defina uma intenção personalizada para o e-mail.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:mail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shipment</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --intent=confirmation</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ./app/mails/shipment_confirmation.ts</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:mail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> storage</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --intent=warning</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ./app/mails/storage_warning.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="make-policy" tabindex="-1"><code>make:policy</code> <a class="header-anchor" href="#make-policy" aria-label="Permalink to &quot;`make:policy`&quot;">​</a></h2><p>Cria uma nova classe de política Bouncer. As políticas são armazenadas dentro da pasta <code>app/policies</code> e usam as seguintes convenções de nomenclatura.</p><ul><li>Forma: <code>singular</code></li><li>Sufixo: <code>policy</code></li><li>Exemplo de nome de classe: <code>PostPolicy</code></li><li>Exemplo de nome de arquivo: <code>post_policy.ts</code></li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:policy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> post</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="inspect-rcfile" tabindex="-1"><code>inspect:rcfile</code> <a class="header-anchor" href="#inspect-rcfile" aria-label="Permalink to &quot;`inspect:rcfile`&quot;">​</a></h2><p>Visualize o conteúdo do arquivo <code>adonisrc.ts</code> após mesclar os padrões. Você pode usar este comando para inspecionar as opções de configuração disponíveis e substituí-las de acordo com os requisitos do seu aplicativo.</p><p>Veja também: <a href="./../concepts/adonisrc_file.html">arquivo AdonisRC</a></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect:rcfile</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="list-routes" tabindex="-1"><code>list:routes</code> <a class="header-anchor" href="#list-routes" aria-label="Permalink to &quot;`list:routes`&quot;">​</a></h2><p>Visualize a lista de rotas registradas pelo seu aplicativo. Este comando inicializará seu aplicativo AdonisJS no ambiente <code>console</code>.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list:routes</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Além disso, você pode ver a lista de rotas na barra de atividades do VSCode se estiver usando nossa <a href="https://marketplace.visualstudio.com/items?itemName=jripouteau.adonis-vscode-extension" target="_blank" rel="noreferrer">extensão oficial do VSCode</a>.</p><p><img src="'+s+'" alt=""></p><h3 id="json" tabindex="-1"><code>--json</code> <a class="header-anchor" href="#json" aria-label="Permalink to &quot;`--json`&quot;">​</a></h3><p>Visualize as rotas como uma string JSON. A saída será uma matriz de objetos.</p><h3 id="table" tabindex="-1"><code>--table</code> <a class="header-anchor" href="#table" aria-label="Permalink to &quot;`--table`&quot;">​</a></h3><p>Visualize as rotas dentro de uma tabela CLI. Por padrão, exibimos as rotas dentro de uma lista compacta e bonita.</p><h3 id="middleware" tabindex="-1"><code>--middleware</code> <a class="header-anchor" href="#middleware" aria-label="Permalink to &quot;`--middleware`&quot;">​</a></h3><p>Filtre a lista de rotas e inclua aquelas que usam o middleware mencionado. Você pode usar a palavra-chave <code>*</code> para incluir rotas que usam um ou mais middlewares.</p><h3 id="ignore-middleware" tabindex="-1"><code>--ignore-middleware</code> <a class="header-anchor" href="#ignore-middleware" aria-label="Permalink to &quot;`--ignore-middleware`&quot;">​</a></h3><p>Filtre a lista de rotas e inclua aquelas que NÃO usam o middleware mencionado. Você pode usar a palavra-chave <code>*</code> para incluir rotas que não usam nenhum middleware.</p><h2 id="env-add" tabindex="-1"><code>env:add</code> <a class="header-anchor" href="#env-add" aria-label="Permalink to &quot;`env:add`&quot;">​</a></h2><p>O comando <code>env:add</code> permite que você adicione novas variáveis ​​de ambiente aos arquivos <code>.env</code>, <code>.env.example</code> e também definirá as regras de validação no arquivo <code>start/env.ts</code>.</p><p>Você pode simplesmente executar o comando e ele solicitará o nome da variável, o valor e as regras de validação. Ou você pode passá-los como argumentos.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Solicitará o nome da variável, valor e regras de validação</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env:add</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Defina o nome da variável, valor e regra de validação</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env:add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MY_VARIABLE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --type=string</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="type" tabindex="-1"><code>--type</code> <a class="header-anchor" href="#type" aria-label="Permalink to &quot;`--type`&quot;">​</a></h3><p>Defina o tipo da variável de ambiente. O valor deve ser um dos seguintes: <code>string</code>, <code>boolean</code>, <code>number</code>, <code>enum</code>.</p><h3 id="enum-values" tabindex="-1"><code>--enum-values</code> <a class="header-anchor" href="#enum-values" aria-label="Permalink to &quot;`--enum-values`&quot;">​</a></h3><p>Defina os valores permitidos para a variável de ambiente quando o tipo for <code>enum</code>.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env:add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MY_VARIABLE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --type=enum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --enum-values=foo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --enum-values=bar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',184)]))}const g=i(r,[["render",l]]);export{b as __pageData,g as default};
