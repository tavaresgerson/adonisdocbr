import{_ as a,c as i,a2 as e,o as n}from"./chunks/framework.BLTIpkzl.js";const k=JSON.parse('{"title":"Usando analisadores de tipo personalizados do Postgres","description":"","frontmatter":{},"headers":[],"relativePath":"docs/cookbooks/database/using-postgres-custom-type-parsers.md","filePath":"docs/cookbooks/database/using-postgres-custom-type-parsers.md"}'),o={name:"docs/cookbooks/database/using-postgres-custom-type-parsers.md"};function p(t,s,r,l,d,h){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="usando-analisadores-de-tipo-personalizados-do-postgres" tabindex="-1">Usando analisadores de tipo personalizados do Postgres <a class="header-anchor" href="#usando-analisadores-de-tipo-personalizados-do-postgres" aria-label="Permalink to &quot;Usando analisadores de tipo personalizados do Postgres&quot;">​</a></h1><p>Este guia aborda o processo de uso do adaptador pg para substituir como um tipo de dado específico é analisado e transformado em um tipo JavaScript.</p><p>Por padrão, o servidor de backend PostgreSQL retorna tudo como strings.</p><p>Por exemplo, isso pode ser problemático se você precisar que sua API retorne o tipo JavaScript Number para todas as colunas decimais que você tem no banco de dados.</p><p>Para corrigir isso, você pode fazer o driver subjacente <a href="https://node-postgres.com/api/client" target="_blank" rel="noreferrer">node-postgres</a> desconsiderar a segurança da conversão e converter suas colunas para os tipos desejados.</p><div class="info custom-block"><p class="custom-block-title">NOTA</p><p>O JavaScript não tem suporte para inteiros de 64 bits e o node-postgres não pode analisar com segurança os resultados do tipo de dado int8 como números porque se você tiver um número enorme, ele irá estourar e o resultado que você obteria do node-postgres não seria o resultado no banco de dados.</p><p><strong>Então use isso somente se você sabe que nunca terá números maiores que int4 no seu banco de dados.</strong></p></div><h2 id="obtendo-o-valor-oid-do-tipo-postgresql" tabindex="-1">Obtendo o valor OID do tipo PostgreSQL <a class="header-anchor" href="#obtendo-o-valor-oid-do-tipo-postgresql" aria-label="Permalink to &quot;Obtendo o valor OID do tipo PostgreSQL&quot;">​</a></h2><p>Digamos que queremos analisar todas as colunas <code>decimal</code> para <code>float</code>. Primeiro precisamos encontrar o valor <code>OID</code> do tipo <code>NUMERIC</code> PostgreSQL.</p><div class="info custom-block"><p class="custom-block-title">NOTA</p><p>Cada tipo de dado corresponde a um OID exclusivo dentro do servidor, e esses OIDs são enviados de volta com a resposta da consulta. Então, você precisa corresponder um OID específico a uma função que você gostaria de usar para pegar a entrada de texto bruto e produzir um objeto JavaScript válido como resultado.</p></div><p>Para fazer isso, podemos executar esta consulta no banco de dados:</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> typname, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">oid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, typarray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pg_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">order by</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> oid</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Mas há uma maneira mais simples e fácil de fazer isso. Temos todos os tipos enumerados se importarmos <code>import { types } from &#39;pg&#39;</code>.</p><h2 id="usando-o-metodo-settypeparser-para-analisar-tipos" tabindex="-1">Usando o método setTypeParser para analisar tipos <a class="header-anchor" href="#usando-o-metodo-settypeparser-para-analisar-tipos" aria-label="Permalink to &quot;Usando o método setTypeParser para analisar tipos&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">NOTA</p><p>Certifique-se de ter o driver <code>PostgreSQL</code> instalado.</p></div><p>Precisamos chamar o método pg.setTypeParser dentro do AppProvider.ts para configurar nossos analisadores de tipo personalizados.</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// providers/AppProvider.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { types } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;pg&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // estamos importando tipos de pg, então podemos usar enums existentes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ApplicationContract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> boot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // -- é aqui que a mágica acontece!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    types.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTypeParser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(types.builtins.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NUMERIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... resto do AppProvider.ts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="faca-o-driver-usar-bigint-automaticamente-para-bigint-bigserial" tabindex="-1">Faça o driver usar BigInt automaticamente para BIGINT + BIGSERIAL <a class="header-anchor" href="#faca-o-driver-usar-bigint-automaticamente-para-bigint-bigserial" aria-label="Permalink to &quot;Faça o driver usar BigInt automaticamente para BIGINT + BIGSERIAL&quot;">​</a></h2><p>Mais um exemplo é como podemos utilizar isso para converter os tipos BIGINT e BIGSERIAL PostgreSQL para JavaScript BigInt:</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// INT8 é OID 20 que corresponde a: BIGINT | BIGSERIAL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">types.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTypeParser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(types.builtins.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">INT8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, BigInt)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,19)]))}const u=a(o,[["render",p]]);export{k as __pageData,u as default};
