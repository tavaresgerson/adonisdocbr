import{_ as a,c as i,a2 as e,o as t}from"./chunks/framework.YPpNXepj.js";const c=JSON.parse('{"title":"Proteção CSRF","description":"","frontmatter":{},"headers":[],"relativePath":"docs/05-Security/05-CSRF-Protection.md","filePath":"docs/05-Security/05-CSRF-Protection.md"}'),n={name:"docs/05-Security/05-CSRF-Protection.md"};function o(l,s,p,r,d,h){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="protecao-csrf" tabindex="-1">Proteção CSRF <a class="header-anchor" href="#protecao-csrf" aria-label="Permalink to &quot;Proteção CSRF&quot;">​</a></h1><p><a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)" target="_blank" rel="noreferrer">Cross-Site Request Forgery (CSRF)</a> permite que um invasor execute ações em nome de outro usuário sem seu conhecimento ou permissão.</p><p>O AdonisJs protege seu aplicativo de ataques CSRF negando solicitações não identificadas. As solicitações HTTP com métodos <em>POST, PUT e DELETE</em> são verificadas para garantir que as pessoas certas do lugar certo invoquem essas solicitações.</p><h2 id="configuracao" tabindex="-1">Configuração <a class="header-anchor" href="#configuracao" aria-label="Permalink to &quot;Configuração&quot;">​</a></h2><p>Instale o provedor <code>shield</code> via npm executando o seguinte comando:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">adonis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @adonisjs/shield</span></span></code></pre></div><p>Em seguida, registre o provedor dentro do arquivo <code>start/app.js</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .start/app.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> providers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;@adonisjs/shield/providers/ShieldProvider&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>Finalmente, registre o middleware global dentro do arquivo <code>start/kernel.js</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .start/kernel.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> globalMiddleware</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;Adonis/Middleware/Shield&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">NOTA</p><p>O middleware Shield depende de <a href="/docs/04-Basics/07-Sessions.html">sessões</a>, então certifique-se de que elas estejam configuradas corretamente.</p></div><h2 id="configuracao-1" tabindex="-1">Configuração <a class="header-anchor" href="#configuracao-1" aria-label="Permalink to &quot;Configuração&quot;">​</a></h2><p>A configuração para CSRF é salva dentro do arquivo <code>config/shield.js</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .config/shield.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">csrf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  enable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;PUT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DELETE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  filterUris</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/user/:id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  cookieOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><table tabindex="0"><thead><tr><th>Chave</th><th>Valor</th><th>Descrição</th></tr></thead><tbody><tr><td>enable</td><td>Boolean</td><td>Um booleano para ativar/desativar o CSRF para todo o aplicativo.</td></tr><tr><td>methods</td><td>Array</td><td>Verbos HTTP a serem protegidos por CSRF. Considere adicionar todos os verbos que permitem que o usuário final adicione ou modifique dados.</td></tr><tr><td>filterUris</td><td>Array</td><td>Uma lista de URLs/Rotas para ignorar. Você pode passar definições de rotas reais ou uma expressão regular para corresponder.</td></tr><tr><td>cookieOptions</td><td>Object</td><td>Um objeto de <a href="https://www.npmjs.com/package/cookie#options-1" target="_blank" rel="noreferrer">opções de cookies</a>.</td></tr></tbody></table><h2 id="como-funciona" tabindex="-1">Como funciona <a class="header-anchor" href="#como-funciona" aria-label="Permalink to &quot;Como funciona&quot;">​</a></h2><ol><li>O AdonisJs cria um <em>CSRF secret</em> para cada usuário que visita seu site.</li><li>Um token correspondente para o segredo é gerado para cada solicitação e passado para todas as visualizações como globais <code>csrfToken</code> e <code>csrfField()</code>.</li><li>Além disso, o mesmo token é definido como um cookie com a chave <code>XSRF-TOKEN</code>. Frameworks de front-end como <em>AngularJs</em> leem automaticamente esse cookie e o enviam junto com cada solicitação Ajax.</li><li>Sempre que uma solicitação <em>POST</em>, <em>PUT</em> ou <em>DELETE</em> chega, o middleware verifica o token com o segredo para garantir que ele seja válido.</li></ol><div class="warning custom-block"><p class="custom-block-title">OBSERVAÇÃO</p><p>Se você estiver usando o valor de cookie <code>XSRF-TOKEN</code>, certifique-se de que a chave do cabeçalho seja <code>X-XSRF-TOKEN</code>.</p></div><h2 id="auxiliares-de-visualizacao" tabindex="-1">Auxiliares de visualização <a class="header-anchor" href="#auxiliares-de-visualizacao" aria-label="Permalink to &quot;Auxiliares de visualização&quot;">​</a></h2><p>Você pode acessar o token CSRF usando um dos seguintes auxiliares de visualização para garantir que ele seja definido dentro de seus formulários.</p><p>Para enviar o token junto com cada solicitação, você precisa acessá-lo. Existem algumas maneiras de obter acesso ao token CSRF.</p><h4 id="csrffield" tabindex="-1"><code>csrfField</code> <a class="header-anchor" href="#csrffield" aria-label="Permalink to &quot;\`csrfField\`&quot;">​</a></h4><div class="language-edge vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">edge</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">csrfField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }}</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- .Output --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hidden&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_csrf&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxxxxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="csrftoken" tabindex="-1"><code>csrfToken</code> <a class="header-anchor" href="#csrftoken" aria-label="Permalink to &quot;\`csrfToken\`&quot;">​</a></h4><p>O auxiliar <code>csrfToken</code> retorna o valor bruto do token:</p><div class="language-edge vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">edge</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ csrfToken }}</span></span></code></pre></div><h2 id="tratamento-de-excecao" tabindex="-1">Tratamento de exceção <a class="header-anchor" href="#tratamento-de-excecao" aria-label="Permalink to &quot;Tratamento de exceção&quot;">​</a></h2><p>Em caso de falha de validação, uma exceção é lançada com o código <em>EBADCSRFTOKEN</em>.</p><p>Certifique-se de ouvir essa exceção e retornar uma resposta apropriada, como esta:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .app/Exceptions/Handler.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExceptionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;EBADCSRFTOKEN&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forbidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cannot process your request.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,31)]))}const g=a(n,[["render",o]]);export{c as __pageData,g as default};
