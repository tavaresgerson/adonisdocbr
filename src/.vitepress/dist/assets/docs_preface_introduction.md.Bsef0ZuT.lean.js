import{_ as a,c as i,a2 as n,o as e}from"./chunks/framework.Dz7_3PEu.js";const c=JSON.parse('{"title":"Introdução","description":"","frontmatter":{"summary":"AdonisJS é um framework web TypeScript-first para Node.js. Você pode usá-lo para criar um aplicativo web full-stack ou um servidor JSON API."},"headers":[],"relativePath":"docs/preface/introduction.md","filePath":"docs/preface/introduction.md"}'),t={name:"docs/preface/introduction.md"};function p(r,s,l,o,h,d){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="introducao" tabindex="-1">Introdução <a class="header-anchor" href="#introducao" aria-label="Permalink to &quot;Introdução&quot;">​</a></h1><h2 id="o-que-e-adonisjs" tabindex="-1">O que é AdonisJS? <a class="header-anchor" href="#o-que-e-adonisjs" aria-label="Permalink to &quot;O que é AdonisJS?&quot;">​</a></h2><p>AdonisJS é um framework web TypeScript-first para Node.js. Você pode usá-lo para criar um aplicativo web full-stack ou um servidor JSON API.</p><p>No nível fundamental, AdonisJS <a href="./../getting_started/folder_structure.html">fornece estrutura para seus aplicativos</a>, configura um <a href="./../concepts/typescript_build_process.html">ambiente de desenvolvimento TypeScript perfeito</a>, configura <a href="./../concepts/hmr.html">HMR</a> para seu código de backend e oferece uma vasta coleção de pacotes bem mantidos e amplamente documentados.</p><p>Imaginamos que equipes usando o AdonisJS <strong>gastem menos tempo</strong> em decisões triviais como selecionar pacotes npm para cada recurso secundário, escrever código de colagem, debater sobre a estrutura de pasta perfeita e <strong>gastem mais tempo</strong> entregando recursos do mundo real essenciais para as necessidades do negócio.</p><h3 id="agnostico-de-frontend" tabindex="-1">Agnóstico de frontend <a class="header-anchor" href="#agnostico-de-frontend" aria-label="Permalink to &quot;Agnóstico de frontend&quot;">​</a></h3><p>O AdonisJS foca no backend e permite que você escolha a pilha de frontend de sua escolha.</p><p>Se você gosta de manter as coisas simples, combine o AdonisJS com um <a href="./../views-and-templates/introduction.html">mecanismo de modelo tradicional</a> para gerar HTML estático no servidor, crie uma API JSON para seu aplicativo frontend Vue/React ou use <a href="./../views-and-templates/inertia.html">Inertia</a> para fazer seu framework de frontend favorito trabalhar em perfeita harmonia.</p><p>O AdonisJS tem como objetivo fornecer baterias para criar um aplicativo de backend robusto do zero. Seja enviando e-mails, validando a entrada do usuário, executando operações CRUD ou autenticando usuários. Nós cuidamos de tudo.</p><h3 id="moderno-e-seguro-para-tipos" tabindex="-1">Moderno e seguro para tipos <a class="header-anchor" href="#moderno-e-seguro-para-tipos" aria-label="Permalink to &quot;Moderno e seguro para tipos&quot;">​</a></h3><p>O AdonisJS é construído sobre primitivos modernos do JavaScript. Usamos módulos ES, aliases de importação de subcaminhos do Node.js, SWC para executar a fonte TypeScript e Vite para agrupamento de ativos.</p><p>Além disso, o TypeScript desempenha um papel considerável ao projetar as APIs do framework. Por exemplo, o AdonisJS tem:</p><ul><li><a href="./../digging_deeper/emitter.html#making-events-type-safe">Emissor de evento seguro para tipos</a></li><li><a href="./../getting_started/environment_variables.html">Variáveis ​​de ambiente seguras para tipos</a></li><li><a href="./../basics/validation.html">Biblioteca de validação segura para tipos</a></li></ul><h3 id="adotando-o-mvc" tabindex="-1">Adotando o MVC <a class="header-anchor" href="#adotando-o-mvc" aria-label="Permalink to &quot;Adotando o MVC&quot;">​</a></h3><p>O AdonisJS adota o padrão de design MVC clássico. Você começa definindo as rotas usando a API JavaScript funcional, vincula controladores a elas e escreve lógica para manipular as solicitações HTTP dentro dos controladores.</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// start/routes.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> router </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@adonisjs/core/services/router&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PostsController</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#controllers/posts_controller&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;posts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [PostsController, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Os controladores podem usar modelos para buscar dados do banco de dados e renderizar uma visualização (também conhecida como modelo) como resposta.</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app/controllers/posts_controller.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Post </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#models/post&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { HttpContext } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@adonisjs/core/http&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PostsController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> posts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Post.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> view.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pages/posts/list&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { posts })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Se você estiver construindo um servidor de API, poderá substituir a camada de visualização por uma resposta JSON. Mas o fluxo de manipulação e resposta às solicitações HTTP permanece o mesmo.</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app/controllers/posts_controller.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Post </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#models/post&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { HttpContext } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@adonisjs/core/http&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PostsController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> posts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Post.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line diff remove"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> view.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pages/posts/list&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { posts }) </span></span>
<span class="line"></span>
<span class="line diff add"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line diff add"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * O array de posts será serializado para JSON</span></span>
<span class="line diff add"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * automaticamente.</span></span>
<span class="line diff add"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> posts </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="suposicoes-dos-guias" tabindex="-1">Suposições dos guias <a class="header-anchor" href="#suposicoes-dos-guias" aria-label="Permalink to &quot;Suposições dos guias&quot;">​</a></h2><p>A documentação do AdonisJS é escrita como um guia de referência, cobrindo o uso e a API de vários pacotes e módulos mantidos pela equipe principal.</p><p><strong>O guia não ensina como construir um aplicativo do zero</strong>. Se você estiver procurando por um tutorial, recomendamos começar sua jornada com <a href="https://adocasts.com/" target="_blank" rel="noreferrer">Adocasts</a>. Tom (o criador do Adocasts) criou alguns screencasts de alta qualidade, ajudando você a dar os primeiros passos com o AdonisJS.</p><p>Dito isso, a documentação abrange extensivamente o uso dos módulos disponíveis e o funcionamento interno do framework.</p><h2 id="lancamentos-recentes" tabindex="-1">Lançamentos recentes <a class="header-anchor" href="#lancamentos-recentes" aria-label="Permalink to &quot;Lançamentos recentes&quot;">​</a></h2><p>A seguir está a lista de lançamentos recentes. <a href="./releases.html">Clique aqui</a> para visualizar todos os lançamentos.</p>`,26)]))}const u=a(t,[["render",p]]);export{c as __pageData,u as default};
