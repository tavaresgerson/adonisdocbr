import{_ as e,c as o,a2 as r,o as i}from"./chunks/framework.Dz7_3PEu.js";const d="/assets/server_boot_lifecycle.D17k1TuF.png",h=JSON.parse('{"title":"Visão geral do HTTP","description":"","frontmatter":{"summary":"Aprenda como o AdonisJS inicializa o servidor HTTP, manipula solicitações de entrada e os módulos disponíveis na camada HTTP."},"headers":[],"relativePath":"docs/concepts/http-overview.md","filePath":"docs/concepts/http-overview.md"}'),t={name:"docs/concepts/http-overview.md"};function s(n,a,l,c,m,p){return i(),o("div",null,a[0]||(a[0]=[r('<h1 id="visao-geral-do-http" tabindex="-1">Visão geral do HTTP <a class="header-anchor" href="#visao-geral-do-http" aria-label="Permalink to &quot;Visão geral do HTTP&quot;">​</a></h1><p>O AdonisJS é principalmente uma estrutura da web para criar aplicativos que respondem a solicitações HTTP. Neste guia, aprenderemos como o AdonisJS inicializa o servidor HTTP, manipula as solicitações de entrada e os módulos disponíveis na camada HTTP.</p><h2 id="a-camada-http" tabindex="-1">A camada HTTP <a class="header-anchor" href="#a-camada-http" aria-label="Permalink to &quot;A camada HTTP&quot;">​</a></h2><p>A camada HTTP dentro de um aplicativo AdonisJS consiste nos seguintes módulos. Vale mencionar que a camada HTTP do AdonisJS é construída do zero e não usa nenhum microframework sob o capô.</p><h3 id="roteador" tabindex="-1"><a href="./../basics/routing.html">Roteador</a> <a class="header-anchor" href="#roteador" aria-label="Permalink to &quot;[Roteador](../basics/routing.md)&quot;">​</a></h3><p>O <a href="https://github.com/adonisjs/http-server/blob/main/src/router/main.ts" target="_blank" rel="noreferrer">módulo roteador</a> é responsável por definir os pontos de extremidade do seu aplicativo, que são conhecidos como rotas. Uma rota deve definir um manipulador responsável por manipular a solicitação. O manipulador pode ser um fechamento ou referência a um controlador.</p><h3 id="controladores" tabindex="-1"><a href="./../basics/controllers.html">Controladores</a> <a class="header-anchor" href="#controladores" aria-label="Permalink to &quot;[Controladores](../basics/controllers.md)&quot;">​</a></h3><p>Controladores são classes JavaScript que você vincula a uma rota para manipular as solicitações HTTP. Controladores agem como uma camada de organização e ajudam a dividir a lógica de negócios do seu aplicativo dentro de diferentes arquivos/classes.</p><h3 id="httpcontext" tabindex="-1"><a href="./http_context.html">HttpContext</a> <a class="header-anchor" href="#httpcontext" aria-label="Permalink to &quot;[HttpContext](./http_context.md)&quot;">​</a></h3><p>O AdonisJS cria uma instância da classe <a href="https://github.com/adonisjs/http-server/blob/main/src/http_context/main.ts" target="_blank" rel="noreferrer">HttpContext</a> para cada solicitação HTTP recebida. O HttpContext (também conhecido como <code>ctx</code>) carrega informações como o corpo da solicitação, cabeçalhos, usuário autenticado, etc., para uma determinada solicitação.</p><h3 id="middleware" tabindex="-1"><a href="./../basics/middleware.html">Middleware</a> <a class="header-anchor" href="#middleware" aria-label="Permalink to &quot;[Middleware](../basics/middleware.md)&quot;">​</a></h3><p>O pipeline de middleware no AdonisJS é uma implementação do padrão de design <a href="https://refactoring.guru/design-patterns/chain-of-responsibility" target="_blank" rel="noreferrer">Chain of Responsibility</a>. Você pode usar o middleware para interceptar solicitações HTTP e responder a elas antes que cheguem ao manipulador de rotas.</p><h3 id="global-exception-handler" tabindex="-1"><a href="./../basics/exception_handling.html">Global Exception handler</a> <a class="header-anchor" href="#global-exception-handler" aria-label="Permalink to &quot;[Global Exception handler](../basics/exception_handling.md)&quot;">​</a></h3><p>O manipulador de exceção global manipula exceções geradas durante uma solicitação HTTP em um local central. Você pode usar o manipulador de exceção global para converter exceções em uma resposta HTTP ou relatá-las a um serviço de registro externo.</p><h3 id="servidor" tabindex="-1">Servidor <a class="header-anchor" href="#servidor" aria-label="Permalink to &quot;Servidor&quot;">​</a></h3><p>O <a href="https://github.com/adonisjs/http-server/blob/main/src/server/main.ts" target="_blank" rel="noreferrer">módulo do servidor</a> conecta o roteador, o middleware, o manipulador de exceção global e exporta <a href="https://github.com/adonisjs/http-server/blob/main/src/server/main.ts#L330" target="_blank" rel="noreferrer">uma função <code>handle</code></a> que você pode vincular ao servidor HTTP do Node.js para manipular solicitações.</p><h2 id="como-o-adonisjs-inicializa-o-servidor-http" tabindex="-1">Como o AdonisJS inicializa o servidor HTTP <a class="header-anchor" href="#como-o-adonisjs-inicializa-o-servidor-http" aria-label="Permalink to &quot;Como o AdonisJS inicializa o servidor HTTP&quot;">​</a></h2><p>O servidor HTTP é inicializado quando você chama <a href="https://github.com/adonisjs/http-server/blob/main/src/server/main.ts#L252" target="_blank" rel="noreferrer">o método <code>boot</code></a> na classe Server. Por baixo dos panos, esse método executa as seguintes ações.</p><ul><li>Crie o pipeline de middleware</li><li>Compile rotas</li><li>Importe e instancie o manipulador de exceção global</li></ul><p>Em um aplicativo AdonisJS típico, o método <code>boot</code> é chamado pelo módulo <a href="https://github.com/adonisjs/core/blob/main/src/ignitor/http.ts" target="_blank" rel="noreferrer">Ignitor</a> dentro do arquivo <code>bin/server.ts</code>.</p><p>Além disso, é essencial definir as rotas, o middleware e o manipulador de exceção global antes que o método <code>boot</code> seja chamado, e o AdonisJS consegue isso usando os arquivos de pré-carregamento <code>start/routes.ts</code> e <code>start/kernel.ts</code>](./adonisrc_file.md#preloads).</p><p><img src="'+d+'" alt=""></p><h2 id="ciclo-de-vida-da-solicitacao-http" tabindex="-1">Ciclo de vida da solicitação HTTP <a class="header-anchor" href="#ciclo-de-vida-da-solicitacao-http" aria-label="Permalink to &quot;Ciclo de vida da solicitação HTTP&quot;">​</a></h2><p>Agora que temos um servidor HTTP escutando solicitações de entrada. Vamos ver como o AdonisJS lida com uma determinada solicitação HTTP.</p><div class="info custom-block"><p class="custom-block-title"><strong>Veja também:</strong></p><ul><li><a href="./../basics/middleware.html#middleware-execution-flow">Fluxo de execução do middleware</a></li><li><a href="./../basics/middleware.html#middleware-and-exception-handling">Middleware e tratamento de exceções</a></li></ul></div><h3 id="criando-o-httpcontext" tabindex="-1">Criando o <code>HttpContext</code> <a class="header-anchor" href="#criando-o-httpcontext" aria-label="Permalink to &quot;Criando o `HttpContext`&quot;">​</a></h3><p>Como primeira etapa, o módulo do servidor cria uma instância da classe <a href="./http_context.html">HttpContext</a> e a passa como uma referência ao middleware, aos manipuladores de rota e ao manipulador de exceção global.</p><p>Se você habilitou o <a href="./async_local_storage.html#usage">AsyncLocalStorage</a>, a mesma instância é compartilhada como o estado de armazenamento local.</p><h3 id="executando-pilha-de-middleware-do-servidor" tabindex="-1">Executando pilha de middleware do servidor <a class="header-anchor" href="#executando-pilha-de-middleware-do-servidor" aria-label="Permalink to &quot;Executando pilha de middleware do servidor&quot;">​</a></h3><p>Em seguida, o middleware da <a href="./../basics/middleware.html#server-middleware-stack">pilha de middleware do servidor</a> é executado. Esses middlewares podem interceptar e responder à solicitação antes que ela alcance o manipulador de rotas.</p><p>Além disso, cada solicitação HTTP passa pela pilha de middleware do servidor, mesmo que você não tenha definido nenhum roteador para o ponto de extremidade fornecido. Isso permite que o middleware do servidor adicione funcionalidade a um aplicativo sem depender do sistema de roteamento.</p><h3 id="encontrando-a-rota-correspondente" tabindex="-1">Encontrando a rota correspondente <a class="header-anchor" href="#encontrando-a-rota-correspondente" aria-label="Permalink to &quot;Encontrando a rota correspondente&quot;">​</a></h3><p>Se um middleware do servidor não encerrar a solicitação, procuramos uma rota correspondente para a propriedade <code>req.url</code>. A solicitação é abortada com uma exceção <code>404 - Não encontrado</code> quando nenhuma rota correspondente existe. Caso contrário, continuamos com a solicitação.</p><h3 id="executando-o-middleware-de-rota" tabindex="-1">Executando o middleware de rota <a class="header-anchor" href="#executando-o-middleware-de-rota" aria-label="Permalink to &quot;Executando o middleware de rota&quot;">​</a></h3><p>Assim que houver uma rota correspondente, executamos o <a href="./../basics/middleware.html#router-middleware-stack">middleware global do roteador</a> e a <a href="./../basics/middleware.html#named-middleware-collection">pilha de middleware nomeada</a>. Novamente, o middleware pode interceptar a solicitação antes que ela chegue ao manipulador de rota.</p><h3 id="executando-o-manipulador-de-rota" tabindex="-1">Executando o manipulador de rota <a class="header-anchor" href="#executando-o-manipulador-de-rota" aria-label="Permalink to &quot;Executando o manipulador de rota&quot;">​</a></h3><p>Como etapa final, a solicitação chega ao manipulador de rota e retorna ao cliente com uma resposta.</p><p>Suponha que uma exceção seja gerada durante qualquer etapa do processo. Nesse caso, a solicitação será entregue ao manipulador de exceção global, que é responsável por converter a exceção em uma resposta.</p><h3 id="serializando-a-resposta" tabindex="-1">Serializando a resposta <a class="header-anchor" href="#serializando-a-resposta" aria-label="Permalink to &quot;Serializando a resposta&quot;">​</a></h3><p>Depois de definir o corpo da resposta usando o método <code>response.send</code> ou retornando um valor do manipulador de rota, iniciamos o processo de serialização da resposta e definimos os cabeçalhos apropriados.</p><p>Saiba mais sobre <a href="./../basics/response.html#response-body-serialization">serialização do corpo de resposta</a></p>',41)]))}const b=e(t,[["render",s]]);export{h as __pageData,b as default};
