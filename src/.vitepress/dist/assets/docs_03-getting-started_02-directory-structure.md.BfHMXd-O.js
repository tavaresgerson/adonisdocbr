import{_ as s,c as a,o as i,a4 as e}from"./chunks/framework.nQaBHiNx.js";const g=JSON.parse('{"title":"Estrutura de diretórios","description":"","frontmatter":{},"headers":[],"relativePath":"docs/03-getting-started/02-directory-structure.md","filePath":"docs/03-getting-started/02-directory-structure.md"}'),t={name:"docs/03-getting-started/02-directory-structure.md"},o=e(`<h1 id="estrutura-de-diretorios" tabindex="-1">Estrutura de diretórios <a class="header-anchor" href="#estrutura-de-diretorios" aria-label="Permalink to &quot;Estrutura de diretórios&quot;">​</a></h1><p>A estrutura de diretório pode parecer avassaladora no início, já que há alguns diretórios pré-configurados. Gradualmente você entenderá o benefício de dividir as entidades lógicas em vários diretórios, pois isso mantém seu código fácil de manter e pesquisar.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Commands</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Http</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Listeners</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Model</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bootstrap</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> database</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> migrations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seeds</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> providers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> public</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> resources</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> views</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> storage</span></span></code></pre></div><h2 id="o-diretorio-app" tabindex="-1">O Diretório App <a class="header-anchor" href="#o-diretorio-app" aria-label="Permalink to &quot;O Diretório App&quot;">​</a></h2><p>NOTE: Certifique-se de aprender mais sobre <a href="./.html">Injeção de Dependência</a>, e <a href="/src/docs/02-core-concepts/02-ioc-container.html">Container IoC</a> para entender o conceito de Autoloading.</p><p>A pasta &#39;app&#39; é o lar do seu código e é carregada automaticamente sob o namespace &#39;App&#39;. Se você abrir o arquivo &#39;package.json&#39;, encontrará o seguinte trecho de código dentro dele.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;autoload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;App&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./app&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Você é livre para mudar o namespace de <code>App</code> para qualquer coisa que você quiser. Claro, manter o padrão facilita para outros entenderem o fluxo do código.</p><p>Além disso, o diretório &#39;app&#39; possui subdiretórios para diferentes propósitos. Todos os diretórios dentro do diretório &#39;app&#39; são capitalizados, pois o AdonisJS segue os princípios de Namespacing. Infelizmente, JavaScript ou Node.js não possuem convenções em namespacing, então nós emprestamos padrões/melhores práticas de outras linguagens de programação como PHP.</p><table><thead><tr><th>Diretório</th><th>Propósito</th></tr></thead><tbody><tr><td>Comandos</td><td>Este diretório é dedicado para armazenar comandos do Ace. Idealmente, um único arquivo representa um comando individual.</td></tr><tr><td>Http</td><td>Como o nome sugere, &#39;Http&#39; diretório é dedicado a entidades relacionadas a um servidor HTTP, como: <em>Controladores</em>, <em>Middleware</em>, e <em>Rotas</em>.</td></tr><tr><td>Ouvintes</td><td>O diretório de ouvintes facilita a organização dos seus ouvintes de eventos, já que as funções anônimas em linha não são mantidas nem testáveis. Sinta-se à vontade para criar ouvintes para o <em>Pub/Sub Redis</em> dentro deste diretório.</td></tr><tr><td>Modelo</td><td>O diretório modelo tem seus modelos Lucid. Também há um diretório <em>Hooks</em> dentro deste diretório para armazenar ganchos de modelo.</td></tr></tbody></table><h2 id="o-diretorio-bootstrap" tabindex="-1">O Diretório bootstrap <a class="header-anchor" href="#o-diretorio-bootstrap" aria-label="Permalink to &quot;O Diretório bootstrap&quot;">​</a></h2><p>O diretório &#39;bootstrap&#39; está lá para juntar os pedaços do seu aplicativo para comandos HTTP e servidores. Existem alguns arquivos que você precisa trabalhar dentro deste diretório.</p><table><thead><tr><th>Arquivo</th><th>Propósito</th></tr></thead><tbody><tr><td><code>app.js</code></td><td>Este arquivo é usado para registrar provedores de serviço/comandos e configurar aliases para namespaces comumente usados.</td></tr><tr><td><code>events.js</code></td><td>Você pode usar este arquivo para registrar ouvintes para eventos específicos. Como o diretório &quot;Ouvintes&quot;, você também pode usar este arquivo para registrar ouvintes para <em>Pub/Sub Redis</em>.</td></tr><tr><td><code>extend.js</code></td><td>Este arquivo é usado para estender o provedor de serviços central/terceiros.</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">DICA</p><p>Para manter futuras atualizações fáceis e simples, é recomendado que você não modifique o arquivo <code>bootstrap/http.js</code> e <code>bootstrap/kernel.js</code>.</p></div><h2 id="o-diretorio-config" tabindex="-1">O Diretório config <a class="header-anchor" href="#o-diretorio-config" aria-label="Permalink to &quot;O Diretório config&quot;">​</a></h2><p>O diretório <code>config</code> é usado para definir a configuração para seu aplicativo. O próprio AdonisJs vem com um monte de arquivos de configuração, mas você também é livre para criar seus arquivos de configuração.</p><p>Em ordem, você lê as definições de configuração de qualquer arquivo que você deve usar do provedor <code>Config</code> e não requer arquivos manualmente em seu código.</p><p>Errado:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./config/app.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app.appKey)</span></span></code></pre></div><p>Certo:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Config&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app.appKey&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><h2 id="o-diretorio-database" tabindex="-1">O Diretório database <a class="header-anchor" href="#o-diretorio-database" aria-label="Permalink to &quot;O Diretório database&quot;">​</a></h2><p>Todos os arquivos relacionados ao banco de dados são armazenados dentro do diretório &quot;banco de dados&quot;. Como o SQLite é um banco de dados baseado em arquivo, o arquivo SQLite também será armazenado neste diretório.</p><table><thead><tr><th>Diretório/Arquivo</th><th>Propósito</th></tr></thead><tbody><tr><td>migrations</td><td>Este diretório tem todas as migrações que você criou usando o comando &quot;make:migration&quot;. Saiba mais sobre migrações <a href="/docs/05-database/03-migrations.html">aqui</a>.</td></tr><tr><td>seeds</td><td>As sementes são usadas para preencher um banco de dados com dados falsos. Eles são úteis no estabelecimento do estado inicial de sua aplicação.</td></tr><tr><td>factory.js</td><td>Fábricas são usadas para gerar dados falsos para modelos de Lucid ou tabelas de banco de dados. Você vai acabar usando fábricas muito quando estiver escrevendo testes. &#39;factory.js&#39; é o lugar onde você define os planos-padronizados para os dados falsos.</td></tr></tbody></table><h2 id="o-diretorio-providers" tabindex="-1">O Diretório providers <a class="header-anchor" href="#o-diretorio-providers" aria-label="Permalink to &quot;O Diretório providers&quot;">​</a></h2><p>Se você algum dia sentir vontade de escrever seus próprios provedores, este é o lugar para mantê-los. É aconselhável publicar provedores reutilizáveis no npm.</p><p>Idealmente, não existem regras rígidas para a criação de provedores, apenas certifique-se de ler a documentação do link: provedores de serviço [provedores de serviço] para entender como construir seus provedores. Os provedores dentro do diretório <code>provedores</code> são registrados definindo um caminho absoluto no arquivo <code>app.js</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .bootstrap/app.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> providers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../providers/MyAwesomeProvider&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h2 id="o-diretorio-public" tabindex="-1">O Diretório public <a class="header-anchor" href="#o-diretorio-public" aria-label="Permalink to &quot;O Diretório public&quot;">​</a></h2><p>Como o nome sugere, o diretório &quot;public&quot; é usado para servir ativos estáticos via HTTP. O caminho &quot;/public&quot; não é necessário ao referenciar arquivos deste diretório. Por exemplo:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- .public/style.css --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/style.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><h2 id="o-diretorio-resources" tabindex="-1">O Diretório resources <a class="header-anchor" href="#o-diretorio-resources" aria-label="Permalink to &quot;O Diretório resources&quot;">​</a></h2><p>A pasta &quot;recursos&quot; é usada para armazenar arquivos de apresentação para o seu aplicativo. As &quot;vistas&quot; do Nunjucks também são armazenadas nesta pasta, e você pode criar subpastas adicionais para armazenar <em>Sass</em>/<em>Less</em> ou quaisquer outros arquivos relacionados à construção da interface.</p><table><thead><tr><th>Diretório</th><th>Propósito</th></tr></thead><tbody><tr><td>views</td><td>As visualizações do Nunjucks são armazenadas dentro desta pasta. Sinta-se à vontade para criar diretórios adicionais dentro de &quot;visualizações&quot; para criar <em>parciais</em> ou <em>layout</em>.</td></tr></tbody></table><h2 id="o-diretorio-storage" tabindex="-1">O Diretório <code>storage</code> <a class="header-anchor" href="#o-diretorio-storage" aria-label="Permalink to &quot;O Diretório \`storage\`&quot;">​</a></h2><p>Os logs e sessões da aplicação são armazenados dentro do diretório &quot;storage&quot;. Pense nisso como um armazenamento temporário para a sua aplicação. Além disso, este diretório é adicionado ao arquivo &quot;.gitignore&quot;, de modo que os logs/sessões relacionados à desenvolvimento não sejam cometidos no controle de versão fornecido por provedores como GitHub ou Bitbucket.</p>`,36),r=[o];function n(d,p,l,h,k,c){return i(),a("div",null,r)}const m=s(t,[["render",n]]);export{g as __pageData,m as default};
