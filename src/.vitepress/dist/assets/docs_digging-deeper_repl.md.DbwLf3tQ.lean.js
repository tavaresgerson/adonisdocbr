import{_ as i,c as a,a2 as e,o as n}from"./chunks/framework.Dz7_3PEu.js";const l="/assets/ace_repl.15-ICn_7.png",F=JSON.parse('{"title":"REPL","description":"","frontmatter":{"summary":"AdonisJS oferece um REPL com reconhecimento de aplicativo para interagir com seu aplicativo a partir da linha de comando."},"headers":[],"relativePath":"docs/digging-deeper/repl.md","filePath":"docs/digging-deeper/repl.md"}'),p={name:"docs/digging-deeper/repl.md"};function t(h,s,r,o,d,k){return n(),a("div",null,s[0]||(s[0]=[e('<h1 id="repl" tabindex="-1">REPL <a class="header-anchor" href="#repl" aria-label="Permalink to &quot;REPL&quot;">​</a></h1><p>Assim como o <a href="https://nodejs.org/api/repl.html" target="_blank" rel="noreferrer">Node.js REPL</a>, AdonisJS oferece um REPL com reconhecimento de aplicativo para interagir com seu aplicativo a partir da linha de comando. Você pode iniciar a sessão REPL usando o comando <code>node ace repl</code>.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repl</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+l+`" alt=""></p><p>Além de um REPL Node.js padrão, AdonisJS fornece os seguintes recursos.</p><ul><li>Importar e executar arquivos TypeScript.</li><li>Métodos abreviados para importar serviços de contêiner como o serviço <code>router</code>, <code>helpers</code>, <code>hash</code> e assim por diante.</li><li><a href="./../concepts/dependency_injection.html#constructing-a-tree-of-dependencies">Contêiner IoC</a>.</li><li>API extensível para adicionar métodos personalizados e comandos REPL.</li></ul><h2 id="interagindo-com-repl" tabindex="-1">Interagindo com REPL <a class="header-anchor" href="#interagindo-com-repl" aria-label="Permalink to &quot;Interagindo com REPL&quot;">​</a></h2><p>Depois de iniciar a sessão REPL, você verá um prompt interativo no qual pode escrever um código JavaScript válido e pressionar Enter para executá-lo. A saída do código será impressa na linha a seguir.</p><p>Se quiser digitar várias linhas de código, você pode entrar no modo editor digitando o comando <code>.editor</code>. Pressione <code>Ctrl+D</code> para executar uma instrução multilinha ou <code>Ctrl+C</code> para cancelar e sair do modo editor.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) .editor</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># // Entering editor mode (Ctrl+D to finish, Ctrl+C to cancel)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="acessando-o-resultado-do-ultimo-comando-executado" tabindex="-1">Acessando o resultado do último comando executado <a class="header-anchor" href="#acessando-o-resultado-do-ultimo-comando-executado" aria-label="Permalink to &quot;Acessando o resultado do último comando executado&quot;">​</a></h3><p>Se você esquecer de atribuir o valor de uma instrução a uma variável, poderá acessá-la usando a variável <code>_</code>. Por exemplo:</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) helpers.string.generateRandom(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &#39;Z3y8QQ4HFpYSc39O2UiazwPeKYdydZ6M&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) _</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &#39;Z3y8QQ4HFpYSc39O2UiazwPeKYdydZ6M&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) _.length</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 32</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="acessando-o-erro-gerado-pelo-ultimo-comando-executado" tabindex="-1">Acessando o erro gerado pelo último comando executado <a class="header-anchor" href="#acessando-o-erro-gerado-pelo-ultimo-comando-executado" aria-label="Permalink to &quot;Acessando o erro gerado pelo último comando executado&quot;">​</a></h3><p>Você pode acessar a exceção gerada pelo comando anterior usando a variável <code>_error</code>. Por exemplo:</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helpers.string.generateRandom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) _error.message</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &#39;The value of &quot;size&quot; is out of range. It must be &gt;= 0 &amp;&amp; &lt;= 2147483647. Received NaN&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="pesquisando-no-historico" tabindex="-1">Pesquisando no histórico <a class="header-anchor" href="#pesquisando-no-historico" aria-label="Permalink to &quot;Pesquisando no histórico&quot;">​</a></h3><p>O histórico do REPL é salvo no arquivo <code>.adonisjs_v6_repl_history</code> no diretório inicial do usuário.</p><p>Você pode percorrer os comandos do histórico pressionando a tecla de seta para cima <code>↑</code> ou pressionando <code>Ctrl+R</code> para pesquisar no histórico.</p><h3 id="saindo-da-sessao-repl" tabindex="-1">Saindo da sessão REPL <a class="header-anchor" href="#saindo-da-sessao-repl" aria-label="Permalink to &quot;Saindo da sessão REPL&quot;">​</a></h3><p>Você pode sair da sessão REPL digitando <code>.exit</code> ou pressionando <code>Ctrl+C</code> duas vezes. O AdonisJS executará um desligamento normal antes de fechar a sessão REPL.</p><p>Além disso, se você modificar sua base de código, deverá sair e reiniciar a sessão REPL para que novas alterações sejam aplicadas.</p><h2 id="importando-modulos" tabindex="-1">Importando módulos <a class="header-anchor" href="#importando-modulos" aria-label="Permalink to &quot;Importando módulos&quot;">​</a></h2><p>O Node.js não permite usar as instruções <code>import</code> dentro da sessão REPL. Portanto, você deve usar a função dinâmica <code>import</code> e atribuir a saída a uma variável. Por exemplo:</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#models/user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Você pode usar o método <code>importDefault</code> para acessar a exportação padrão sem desestruturar as exportações.</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> importDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#models/user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="metodos-auxiliares" tabindex="-1">Métodos auxiliares <a class="header-anchor" href="#metodos-auxiliares" aria-label="Permalink to &quot;Métodos auxiliares&quot;">​</a></h2><p>Os métodos auxiliares são funções de atalho que você pode executar para realizar ações específicas. Você pode visualizar a lista de métodos disponíveis usando o comando <code>.ls</code>.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) .ls</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># GLOBAL METHODS:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">importDefault</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         Returns</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                  Make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> class</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> instance</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> using</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;container.make&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> method</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadApp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               Load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;app&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> REPL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> context</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadEncryption</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;encryption&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> REPL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> context</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadHash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              Load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hash&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> REPL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> context</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadRouter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            Load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;router&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> REPL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> context</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadConfig</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            Load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;config&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> REPL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> context</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadTestUtils</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         Load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;testUtils&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> REPL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> context</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadHelpers</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           Load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;helpers&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> REPL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> context</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                 Clear</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> property</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> REPL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> context</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                     Promisify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Similar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Node.js</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;util.promisify&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="adicionando-metodos-personalizados-ao-repl" tabindex="-1">Adicionando métodos personalizados ao REPL <a class="header-anchor" href="#adicionando-metodos-personalizados-ao-repl" aria-label="Permalink to &quot;Adicionando métodos personalizados ao REPL&quot;">​</a></h2><p>Você pode adicionar métodos personalizados ao REPL usando <code>repl.addMethod</code>. O método aceita o nome como o primeiro argumento e o retorno de chamada de implementação como o segundo argumento.</p><p>Para demonstração, vamos criar um arquivo <a href="./../concepts/adonisrc_file.html#preloads">preload file</a> e definir um método para importar todos os modelos do diretório <code>./app/models</code>.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:preload</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e=repl</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// title: start/repl.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@adonisjs/core/services/app&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@adonisjs/core/services/repl&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fsImportAll } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@adonisjs/core/helpers&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">repl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;loadModels&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fsImportAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">makePath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app/models&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  repl.server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.context.models </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> models</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  repl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">notify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Imported models. You can access them using the &quot;models&quot; property&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  repl.server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">displayPrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Você pode passar as seguintes opções para o método <code>repl.addMethod</code> como o terceiro argumento.</p><ul><li><code>description</code>: Descrição legível para exibir na saída de ajuda.</li><li><code>usage</code>: Defina o snippet de código de uso do método. Se não for definido, o nome do método será usado.</li></ul><p>Uma vez feito, você pode reiniciar a sessão REPL e executar o método <code>loadModels</code> para importar todos os modelos.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repl</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Type &quot;.ls&quot; to a view list of available context methods/properties</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) await </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadModels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,39)]))}const g=i(p,[["render",t]]);export{F as __pageData,g as default};
