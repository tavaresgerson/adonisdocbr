import{_ as a,c as i,a2 as e,o as n}from"./chunks/framework.BLTIpkzl.js";const o="/assets/adonis-repl_ibios2.DRtIWpiu.mp4",t="/assets/adonis-repl-shortcuts_jcyxay.C9Rr2YDU.mp4",p="/assets/Screenshot_2020-11-09_at_9.50.06_PM_hekkxu.BJAJvxs0.png",r="/assets/repl-load-models_ye0rdy.CJ8p2Vhw.mp4",E=JSON.parse('{"title":"AdonisJS REPL","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guides/digging-deeper/repl.md","filePath":"docs/guides/digging-deeper/repl.md"}'),l={name:"docs/guides/digging-deeper/repl.md"};function d(c,s,h,k,m,u){return n(),i("div",null,s[0]||(s[0]=[e('<h1 id="adonisjs-repl" tabindex="-1">AdonisJS REPL <a class="header-anchor" href="#adonisjs-repl" aria-label="Permalink to &quot;AdonisJS REPL&quot;">​</a></h1><p>REPL significa <strong>read–eval–print loop</strong> - uma maneira de executar rapidamente instruções de linha única e imprimir a saída no terminal.</p><p>Assim como o Node.js, o AdonisJS também tem seu próprio <strong>REPL com reconhecimento de aplicativo</strong>, dando a você acesso ao código do seu aplicativo dentro da sessão REPL.</p><p>Vamos tentar executando o seguinte comando Ace.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repl</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><video src="'+o+'" controls></video><h2 id="metodos-auxiliares" tabindex="-1">Métodos auxiliares <a class="header-anchor" href="#metodos-auxiliares" aria-label="Permalink to &quot;Métodos auxiliares&quot;">​</a></h2><p>Escrever as instruções <code>import</code> dentro do REPL requer um pouco mais de digitação e, portanto, adicionamos vários métodos de atalho para importar os módulos comumente necessários.</p><p>Vamos testar o módulo de criptografia novamente, mas desta vez usaremos o método de atalho para importar o módulo.</p><video src="'+t+'" controls></video><p>Você pode visualizar a lista de métodos auxiliares digitando o comando <code>.ls</code>.</p><p><img src="'+p+'" alt=""></p><p>Assim como tudo o mais, o REPL também tem uma API extensível e, à medida que você instalar novos pacotes, verá a lista de métodos auxiliares crescendo.</p><p>Por exemplo: O Lucid ORM vem com o auxiliar <code>loadModels</code> para carregar recursivamente modelos do diretório <code>app/Models</code>.</p><video src="'+r+`" controls></video><h2 id="adicionando-auxiliares-personalizados" tabindex="-1">Adicionando auxiliares personalizados <a class="header-anchor" href="#adicionando-auxiliares-personalizados" aria-label="Permalink to &quot;Adicionando auxiliares personalizados&quot;">​</a></h2><p>Você pode adicionar seus auxiliares personalizados criando um arquivo de pré-carregamento dentro do diretório <code>start</code>. Comece criando um novo arquivo executando o seguinte comando.</p><div class="info custom-block"><p class="custom-block-title">NOTA</p><p>Certifique-se de selecionar o ambiente como <code>repl</code> pressionando a tecla <code>&lt;SPACE&gt;</code> e pressione enter.</p></div><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:prldfile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repl</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Em seguida, abra o arquivo recém-criado e cole o seguinte conteúdo dentro dele.</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// start/repl.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Repl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@ioc:Adonis/Addons/Repl&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Repl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;sayHi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">repl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(repl.colors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A test method that prints &quot;hi&quot;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Finalmente, inicie a sessão REPL e digite <code>sayHi()</code> para executar o método. Atualmente, estamos escrevendo para o console, no entanto, você pode executar qualquer ação dentro desta função.</p>`,22)]))}const b=a(l,[["render",d]]);export{E as __pageData,b as default};
