import{_ as a,c as s,o as e,a4 as i}from"./chunks/framework.nQaBHiNx.js";const v=JSON.parse('{"title":"Variáveis ​​de ambiente","description":"","frontmatter":{},"headers":[],"relativePath":"docs/03-getting-started/04-env.md","filePath":"docs/03-getting-started/04-env.md"}'),o={name:"docs/03-getting-started/04-env.md"},n=i(`<h1 id="variaveis-​​de-ambiente" tabindex="-1">Variáveis ​​de ambiente <a class="header-anchor" href="#variaveis-​​de-ambiente" aria-label="Permalink to &quot;Variáveis ​​de ambiente&quot;">​</a></h1><p>Todos nós escrevemos aplicativos em um ambiente de desenvolvimento e os implantamos no ambiente de produção em nossos servidores. Agora, não são apenas os termos ou sistemas operacionais que são alterados no ambiente de desenvolvimento ou produção, em vez disso, algumas outras coisas são alteradas. Por exemplo:</p><ol><li>No ambiente de desenvolvimento, você usará seu e-mail pessoal para enviar e-mails, enquanto na produção você pode usar o e-mail da empresa. O mesmo vale para chaves de API de serviços de terceiros.</li><li>Durante o desenvolvimento, você pode não querer armazenar em cache as visualizações, enquanto nas visualizações de produção o armazenamento em cache é necessário para o desempenho.</li></ol><p>Existem algumas maneiras de lidar com a complexidade da troca de ambiente.</p><h3 id="nao-recomendado" tabindex="-1">Não recomendado <a class="header-anchor" href="#nao-recomendado" aria-label="Permalink to &quot;Não recomendado&quot;">​</a></h3><ol><li>Adicione cláusulas <code>if/else</code> dentro do seu aplicativo e verifique o env atual antes de executar a ação.</li><li>Crie várias cópias dos arquivos <code>configuration</code> para cada ambiente.</li></ol><h3 id="solucao" tabindex="-1">Solução <a class="header-anchor" href="#solucao" aria-label="Permalink to &quot;Solução&quot;">​</a></h3><p>Para superar esse problema, o AdonisJs faz uso de <a href="https://en.wikipedia.org/wiki/Env" target="_blank" rel="noreferrer">Variáveis ​​de ambiente</a>, que são muito comuns em scripts bash e agora também usadas por frameworks modernos em diferentes comunidades.</p><h2 id="o-arquivo-env" tabindex="-1">O arquivo (.env) <a class="header-anchor" href="#o-arquivo-env" aria-label="Permalink to &quot;O arquivo (.env)&quot;">​</a></h2><p>Há um arquivo <code>.env</code> dentro da raiz de cada novo projeto AdonisJs. O objetivo deste arquivo é manter todas as variáveis ​​de configuração, que devem mudar entre os ambientes. A seguir está o arquivo .env padrão.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (.env)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">localhost</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3333</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">APP_KEY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">n96M1TPG821EdN4mMIjnGKxGytx9W2UJ</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">development</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CACHE_VIEWS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SESSION_DRIVER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cookie</span></span></code></pre></div><p>Este arquivo é carregado automaticamente no momento da inicialização do servidor HTTP ou da execução de comandos Ace. Você pode ler valores deste arquivo com a ajuda do provedor <code>Env</code> ou acessá-los usando o Node.js <code>process.env</code> global.</p><h2 id="leitura-escrita-de-valores" tabindex="-1">Leitura/Escrita de Valores <a class="header-anchor" href="#leitura-escrita-de-valores" aria-label="Permalink to &quot;Leitura/Escrita de Valores&quot;">​</a></h2><p>Os valores deste arquivo são acessíveis via <code>process.env</code> ou usando o provedor Env integrado. Idealmente, é recomendado usar o <em>Env provider</em>, pois ele pode lidar com alguma inconsistência para você.</p><h4 id="get-value-defaultvalue" tabindex="-1">get(value, [defaultValue]) <a class="header-anchor" href="#get-value-defaultvalue" aria-label="Permalink to &quot;get(value, [defaultValue])&quot;">​</a></h4><p>O método <code>get</code> retornará o valor de uma variável de ambiente. Ele também aceita um <code>defaultValue</code> opcional, que é retornado quando o valor real é <code>undefined</code> ou <code>null</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Env&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;NODE_ENV&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="set-key-value" tabindex="-1">set(key, value) <a class="header-anchor" href="#set-key-value" aria-label="Permalink to &quot;set(key, value)&quot;">​</a></h4><p>O método <code>set</code> atualizará o valor existente com o novo valor. Além disso, ele criará o par chave/valor se ele não existir.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Env&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;NODE_ENV&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">OBSERVAÇÃO</p><p>Atualizar variáveis ​​de ambiente após uma determinada parte do aplicativo tê-las lido não tem efeito. É recomendado substituir variáveis ​​env via linha de comando ao iniciar o servidor HTTP. Por exemplo: <code>PORT=8000 npm start</code>.</p></div><h2 id="localizacao-do-arquivo" tabindex="-1">Localização do arquivo <a class="header-anchor" href="#localizacao-do-arquivo" aria-label="Permalink to &quot;Localização do arquivo&quot;">​</a></h2><p>O AdonisJs carregará automaticamente o arquivo <code>.env</code> da raiz do seu projeto. Você pode substituir a localização do arquivo definindo um caminho diferente no momento de iniciar o servidor.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ENV_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/etc/config/.env</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><p>Às vezes, você pode definir variáveis ​​env usando o painel do seu provedor de hospedagem. Nesse caso, ter o arquivo <code>.env</code> não faz sentido e, para ignorar o erro do provedor Env, você deve iniciar o servidor com <code>ENV_SILENT</code>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ENV_SILENT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div>`,26),t=[n];function l(d,r,p,h,c,k){return e(),s("div",null,t)}const m=a(o,[["render",l]]);export{v as __pageData,m as default};
