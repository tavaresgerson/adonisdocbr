import{_ as a,c as s,o as e,a4 as i}from"./chunks/framework.nQaBHiNx.js";const k=JSON.parse('{"title":"Variáveis de Ambiente","description":"","frontmatter":{},"headers":[],"relativePath":"docs/03-getting-started/04-env.md","filePath":"docs/03-getting-started/04-env.md"}'),o={name:"docs/03-getting-started/04-env.md"},n=i(`<h1 id="variaveis-de-ambiente" tabindex="-1">Variáveis de Ambiente <a class="header-anchor" href="#variaveis-de-ambiente" aria-label="Permalink to &quot;Variáveis de Ambiente&quot;">​</a></h1><p>Todos nós escrevemos aplicações em um ambiente de desenvolvimento e as implantamos no ambiente de produção em nossos servidores. Agora não são apenas os termos ou sistemas operacionais que mudam entre o ambiente de desenvolvimento e o ambiente de produção, mas também muitos outros As coisas mudam. Por exemplo:</p><ol><li>No ambiente de desenvolvimento, você usará seu e-mail pessoal para enviar e-mails, enquanto na produção você pode usar o e-mail da empresa. O mesmo vale para chaves de API de serviços de terceiros.</li><li>Durante o desenvolvimento, você pode não querer armazenar em cache as visualizações, enquanto que na produção a visualização do cache é necessária para desempenho.</li></ol><p>Existem algumas maneiras de lidar com a complexidade da mudança do ambiente.</p><h3 id="nao-recomendado" tabindex="-1">Não recomendado <a class="header-anchor" href="#nao-recomendado" aria-label="Permalink to &quot;Não recomendado&quot;">​</a></h3><ol><li>Adicione cláusulas &#39;se/senão&#39; dentro do seu aplicativo e verifique o ambiente atual antes de tomar a ação.</li><li>Crie múltiplas cópias do arquivo de configuração para cada ambiente.</li></ol><h3 id="solucao" tabindex="-1">Solução <a class="header-anchor" href="#solucao" aria-label="Permalink to &quot;Solução&quot;">​</a></h3><p>Para superar esse problema, o AdonisJs utiliza variáveis de ambiente, que são muito comuns em scripts bash e agora também são usadas por frameworks modernos em diferentes comunidades.</p><h2 id="o-arquivo-env" tabindex="-1">O (arquivo).env <a class="header-anchor" href="#o-arquivo-env" aria-label="Permalink to &quot;O (arquivo).env&quot;">​</a></h2><p>Existem arquivos .env dentro da raiz de cada novo projeto do AdonisJS. O propósito desse arquivo é manter todas as variáveis ​​de configuração, que são supostas mudarem entre ambientes. A seguir está o arquivo .env padrão.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>HOST=localhost</span></span>
<span class="line"><span>PORT=3333</span></span>
<span class="line"><span>APP_KEY=n96M1TPG821EdN4mMIjnGKxGytx9W2UJ</span></span>
<span class="line"><span>NODE_ENV=development</span></span>
<span class="line"><span>CACHE_VIEWS=false</span></span>
<span class="line"><span>SESSION_DRIVER=cookie</span></span></code></pre></div><p>Este arquivo é carregado automaticamente na hora de inicializar o servidor HTTP ou executar comandos do Ace. Você pode ler os valores deste arquivo com a ajuda do provedor Env ou acessá-los usando o objeto global process.env do Node.js.</p><h2 id="leitura-gravacao-de-valores" tabindex="-1">Leitura/Gravação de Valores <a class="header-anchor" href="#leitura-gravacao-de-valores" aria-label="Permalink to &quot;Leitura/Gravação de Valores&quot;">​</a></h2><p>Os valores deste arquivo são acessíveis através de <code>process.env</code> ou usando o provedor Env embutido. Recomenda-se usar o provedor <em>Env</em>, pois pode lidar com algumas inconsistências para você.</p><h4 id="get-valor-valorpadrao" tabindex="-1">get(valor, [valorPadrão]) <a class="header-anchor" href="#get-valor-valorpadrao" aria-label="Permalink to &quot;get(valor, [valorPadrão])&quot;">​</a></h4><p>O método &#39;get&#39; retornará o valor de uma variável de ambiente. Também aceita um parâmetro opcional &#39;defaultValue&#39;, que será retornado quando o valor real for indefinido ou nulo.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Env&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;NODE_ENV&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="set-chave-valor" tabindex="-1">set(chave, valor) <a class="header-anchor" href="#set-chave-valor" aria-label="Permalink to &quot;set(chave, valor)&quot;">​</a></h4><p>O método &#39;set&#39; atualizará o valor existente com o novo valor. Também criará a chave/valor se não existir.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Env&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;NODE_ENV&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>NOTE: Atualizar variáveis de ambiente após uma parte específica do aplicativo ter lido-as não tem efeito. É recomendado substituir as variáveis de ambiente via linha de comando ao iniciar o servidor HTTP. Por exemplo: &#39;PORT=8000 npm start&#39;.</p><h2 id="localizacao-do-arquivo" tabindex="-1">Localização do Arquivo <a class="header-anchor" href="#localizacao-do-arquivo" aria-label="Permalink to &quot;Localização do Arquivo&quot;">​</a></h2><p>AdonisJs irá carregar automaticamente o arquivo <code>.env</code> da raiz do seu projeto. Você pode sobrescrever a localização do arquivo definindo um caminho diferente ao iniciar o servidor.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ENV_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/etc/config/.env</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><p>Às vezes você pode definir variáveis ​​de ambiente usando o painel do seu provedor de hospedagem. Neste caso, não faz sentido ter um arquivo .env e para ignorar o erro do provedor de ambiente, você deve iniciar o servidor com ENV_SILENT.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ENV_SILENT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div>`,26),t=[n];function r(l,d,p,h,c,v){return e(),s("div",null,t)}const m=a(o,[["render",r]]);export{k as __pageData,m as default};
