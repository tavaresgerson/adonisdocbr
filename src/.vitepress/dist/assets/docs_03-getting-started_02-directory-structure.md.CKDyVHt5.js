import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.nQaBHiNx.js";const g=JSON.parse('{"title":"Estrutura de diretório","description":"","frontmatter":{},"headers":[],"relativePath":"docs/03-getting-started/02-directory-structure.md","filePath":"docs/03-getting-started/02-directory-structure.md"}'),t={name:"docs/03-getting-started/02-directory-structure.md"},o=e(`<h1 id="estrutura-de-diretorio" tabindex="-1">Estrutura de diretório <a class="header-anchor" href="#estrutura-de-diretorio" aria-label="Permalink to &quot;Estrutura de diretório&quot;">​</a></h1><p>A estrutura de diretório pode parecer opressiva no começo, já que há um punhado de diretórios pré-configurados. Gradualmente, você entenderá o benefício de dividir as entidades lógicas em vários diretórios, já que isso mantém seu código sustentável e fácil de pesquisar.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Commands</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Http</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Listeners</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Model</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bootstrap</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> database</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> migrations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seeds</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> providers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> public</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> resources</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> views</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> storage</span></span></code></pre></div><h2 id="o-diretorio-app" tabindex="-1">O diretório (app) <a class="header-anchor" href="#o-diretorio-app" aria-label="Permalink to &quot;O diretório (app)&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">OBSERVAÇÃO</p><p>Certifique-se de aprender mais sobre <em>Injeção de dependência</em> e <a href="/docs/02-core-concepts/02-ioc-container.html">Ioc Container</a> para entender o conceito de Autoloading.</p></div><p>O diretório <code>app</code> é o lar do seu código e é carregado automaticamente sob o namespace <code>App</code>. Se você abrir o arquivo <code>package.json</code>, encontrará o seguinte trecho de código dentro dele.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;autoload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;App&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./app&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Você é livre para alterar o namespace de <code>App</code> para o que quiser. Claro, manter o padrão torna mais fácil para outros entenderem o fluxo do código.</p><p>Além disso, o diretório <code>app</code> tem diretórios aninhados para diferentes propósitos. Todos os diretórios dentro do diretório <code>app</code> são capitalizados, já que o AdonisJs segue os princípios de Namespacing. Infelizmente, Javascript ou Node.js não têm convenções sobre namespacing, então pegamos emprestado os padrões/melhores práticas de outras linguagens de programação como Php.</p><table><thead><tr><th>Diretório</th><th>Objetivo</th></tr></thead><tbody><tr><td>Commands</td><td>Este diretório é dedicado para armazenar comandos Ace. Idealmente, um único arquivo representa um comando individual.</td></tr><tr><td>Http</td><td>Como o nome indica, o diretório <code>Http</code> é dedicado a entidades relacionadas a um servidor HTTP, como: <em>Controladores</em>, <em>Middleware</em> e <em>Rotas</em>.</td></tr><tr><td>Listeners</td><td>O diretório Listeners facilita a organização dos seus ouvintes de eventos, já que os closures inline em eventos não são sustentáveis ​​e nem testáveis. Sinta-se à vontade para criar ouvintes para <em>Redis Pub/Sub</em> dentro deste diretório.</td></tr><tr><td>Model</td><td>O diretório Model tem seus modelos Lucid. Além disso, há um diretório <em>Hooks</em> dentro deste diretório para armazenar ganchos Model.</td></tr></tbody></table><h2 id="o-diretorio-bootstrap" tabindex="-1">O diretório (bootstrap) <a class="header-anchor" href="#o-diretorio-bootstrap" aria-label="Permalink to &quot;O diretório (bootstrap)&quot;">​</a></h2><p>O diretório <code>bootstrap</code> está lá para unir as partes do seu aplicativo para o servidor HTTP e comandos ace. Existem alguns arquivos com os quais você precisa trabalhar dentro deste diretório.</p><table><thead><tr><th>Arquivo</th><th>Objetivo</th></tr></thead><tbody><tr><td>app.js</td><td>Este arquivo é usado para registrar provedores de serviço/comandos e configurar aliases para namespaces usados ​​com frequência.</td></tr><tr><td>events.js</td><td>Você pode usar este arquivo para registrar ouvintes para eventos específicos. Assim como o diretório <code>Listeners</code>, você também pode usar este arquivo para registrar ouvintes para <em>Redis Pub/Sub</em>.</td></tr><tr><td>extend.js</td><td>Este arquivo é usado para estender os provedores de serviço de núcleo/terceiros.</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">DICA</p><p>Para manter as atualizações futuras fáceis e simples, é recomendável que você não modifique os arquivos <code>bootstrap/http.js</code> e <code>bootstrap/kernel.js</code>.</p></div><h2 id="o-diretorio-config" tabindex="-1">O diretório (config) <a class="header-anchor" href="#o-diretorio-config" aria-label="Permalink to &quot;O diretório (config)&quot;">​</a></h2><p>O diretório <code>config</code> é usado para definir a configuração para seu aplicativo. O próprio AdonisJs vem com um monte de arquivos de configuração, mas você também é livre para criar seus arquivos de configuração.</p><p>Em ordem, você lê as definições de configuração de qualquer arquivo que você deve fazer uso do provedor <code>Config</code> e não requer arquivos manualmente em seu código.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Errado</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./config/app.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app.appKey)</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Correto</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Config&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app.appKey&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><h2 id="o-diretorio-banco-de-dados" tabindex="-1">O diretório (banco de dados) <a class="header-anchor" href="#o-diretorio-banco-de-dados" aria-label="Permalink to &quot;O diretório (banco de dados)&quot;">​</a></h2><p>Todos os arquivos relacionados ao banco de dados são armazenados dentro do diretório <code>database</code>. Como o <code>SQLite</code> é um banco de dados baseado em arquivo, o arquivo SQLite será armazenado neste diretório também.</p><table><thead><tr><th>Diretório/Arquivo</th><th>Objetivo</th></tr></thead><tbody><tr><td>migrations</td><td>Este diretório tem todas as migrações que você criou usando o comando <code>make:migration</code>. Saiba mais sobre migrações <a href="/docs/05-database/03-migrations.html">aqui</a>.</td></tr><tr><td>seeds</td><td>Sementes são usadas para preencher previamente o banco de dados com dados fictícios. Elas são úteis para configurar um estado inicial do seu aplicativo.</td></tr><tr><td>factory.js</td><td>As fábricas são usadas para gerar dados falsos para modelos Lucid ou tabelas de banco de dados. Você vai se pegar usando muito fábricas ao escrever testes. <code>factory.js</code> é o lugar onde você define blueprints para os dados fictícios.</td></tr></tbody></table><h2 id="o-diretorio-provedores" tabindex="-1">O diretório (provedores) <a class="header-anchor" href="#o-diretorio-provedores" aria-label="Permalink to &quot;O diretório (provedores)&quot;">​</a></h2><p>Se você sentir necessidade de escrever seus provedores, este é o lugar para mantê-los. É aconselhável publicar provedores reutilizáveis ​​no <em>npm</em>.</p><p>O ideal é que não haja regras rígidas para criar provedores, apenas certifique-se de ler a documentação <a href="/src/docs/02-core-concepts/02-ioc-container.html">provedores de serviços</a> para entender como criar seus provedores. Os provedores de serviços dentro do diretório <code>providers</code> são registrados definindo um caminho absoluto dentro do arquivo <code>app.js</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// bootstrap/app.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> providers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../providers/MyAwesomeProvider&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h2 id="o-diretorio-publico" tabindex="-1">O diretório (público) <a class="header-anchor" href="#o-diretorio-publico" aria-label="Permalink to &quot;O diretório (público)&quot;">​</a></h2><p>Como o nome sugere, o diretório <code>public</code> é usado para servir ativos estáticos por HTTP. O caminho <code>/public</code> não é necessário ao referenciar arquivos deste diretório. Por exemplo:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- public/style.css --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/style.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><h2 id="o-diretorio-recursos" tabindex="-1">O diretório (recursos) <a class="header-anchor" href="#o-diretorio-recursos" aria-label="Permalink to &quot;O diretório (recursos)&quot;">​</a></h2><p>O diretório <code>recursos</code> está lá para armazenar arquivos de apresentação para seu aplicativo. As <code>views</code> do Nunjucks também são armazenadas neste diretório, e você tem a liberdade de criar diretórios adicionais para armazenar <em>Sass</em>/<em>Less</em> ou quaisquer arquivos relacionados à construção do frontend.</p><table><thead><tr><th>Diretório</th><th>Objetivo</th></tr></thead><tbody><tr><td>views</td><td>As views do Nunjucks são armazenadas dentro deste diretório. Sinta-se à vontade para criar diretórios adicionais dentro de <code>views</code> para criar <em>partials</em> ou <em>layouts</em>.</td></tr></tbody></table><h2 id="o-diretorio-armazenamento" tabindex="-1">O diretório (armazenamento) <a class="header-anchor" href="#o-diretorio-armazenamento" aria-label="Permalink to &quot;O diretório (armazenamento)&quot;">​</a></h2><p>Os logs e sessões do aplicativo são armazenados dentro do diretório <code>storage</code>. Pense nele como um armazenamento temporário para seu aplicativo. Além disso, este diretório é adicionado ao <code>.gitignore</code>, para que seus logs/sessões relacionados ao desenvolvimento não sejam comprometidos com provedores de controle de versão como Github ou Bitbucket.</p>`,34),r=[o];function n(d,p,l,h,c,k){return a(),i("div",null,r)}const m=s(t,[["render",n]]);export{g as __pageData,m as default};
