import{_ as e,c as s,a2 as o,o as i}from"./chunks/framework.Dz7_3PEu.js";const u=JSON.parse('{"title":"Hot module replacement","description":"","frontmatter":{"summary":"Atualize seu aplicativo AdonisJS sem reiniciar o processo usando a Hot module replacement (HMR)."},"headers":[],"relativePath":"docs/concepts/hmr.md","filePath":"docs/concepts/hmr.md"}'),r={name:"docs/concepts/hmr.md"};function n(t,a,d,p,c,l){return i(),s("div",null,a[0]||(a[0]=[o(`<h1 id="hot-module-replacement" tabindex="-1">Hot module replacement <a class="header-anchor" href="#hot-module-replacement" aria-label="Permalink to &quot;Hot module replacement&quot;">‚Äã</a></h1><p>A <em>Hot module replacement</em> (HMR) se refere ao processo de recarregar m√≥dulos JavaScript ap√≥s a modifica√ß√£o sem reiniciar todo o processo. O HMR geralmente resulta em um loop de feedback mais r√°pido, pois, ap√≥s uma altera√ß√£o de arquivo, voc√™ n√£o precisa esperar que todo o processo reinicie.</p><p>O termo HMR √© usado h√° muitos anos no ecossistema de front-end, onde ferramentas como o Vite podem recarregar m√≥dulos a quente e aplicar altera√ß√µes a uma p√°gina da web, mantendo seu estado existente.</p><p>No entanto, o HMR realizado pelo AdonisJS √© muito mais simples e difere muito de ferramentas como o Vite ou o Webpack. Nosso objetivo com o HMR √© oferecer recarregamentos mais r√°pidos, e √© isso.</p><h2 id="conceitos-chave" tabindex="-1">Conceitos-chave <a class="header-anchor" href="#conceitos-chave" aria-label="Permalink to &quot;Conceitos-chave&quot;">‚Äã</a></h2><h3 id="nenhuma-atualizacao-e-propagada-para-o-navegador" tabindex="-1">Nenhuma atualiza√ß√£o √© propagada para o navegador <a class="header-anchor" href="#nenhuma-atualizacao-e-propagada-para-o-navegador" aria-label="Permalink to &quot;Nenhuma atualiza√ß√£o √© propagada para o navegador&quot;">‚Äã</a></h3><p>Como o AdonisJS √© uma estrutura de back-end, n√£o somos respons√°veis ‚Äã‚Äãpor manter o estado de um aplicativo front-end ou aplicar CSS a uma p√°gina da web. Portanto, nossa integra√ß√£o HMR n√£o pode se comunicar com seu aplicativo front-end e reconciliar seu estado.</p><p>Na verdade, nem todo aplicativo AdonisJS √© um aplicativo da web renderizado pelo navegador. Muitos usam o AdonisJS para criar APIs JSON puras e tamb√©m podem se beneficiar da nossa integra√ß√£o HMR.</p><h3 id="funciona-apenas-com-importacoes-dinamicas" tabindex="-1">Funciona apenas com importa√ß√µes din√¢micas <a class="header-anchor" href="#funciona-apenas-com-importacoes-dinamicas" aria-label="Permalink to &quot;Funciona apenas com importa√ß√µes din√¢micas&quot;">‚Äã</a></h3><p>A maioria das ferramentas HMR usa transforma√ß√µes de c√≥digo para injetar c√≥digo adicional na sa√≠da compilada. Na AdonisJS, n√£o somos grandes f√£s de transpiladores e sempre nos esfor√ßamos para abra√ßar a plataforma como ela √©. Portanto, nossa abordagem para HMR usa <a href="https://nodejs.org/api/module.html#customization-hooks" target="_blank" rel="noreferrer">ganchos de carregador Node.js</a> e funciona apenas com importa√ß√µes din√¢micas.</p><p><strong>A boa not√≠cia √© que todas as partes cr√≠ticas do seu aplicativo AdonisJS s√£o importadas dinamicamente por padr√£o</strong>. Por exemplo, controladores, middleware e ouvintes de eventos s√£o todos importados dinamicamente e, portanto, voc√™ pode aproveitar o HMR a partir de hoje sem alterar uma √∫nica linha de c√≥digo em seu aplicativo.</p><p>Vale a pena mencionar que as importa√ß√µes de um m√≥dulo importado dinamicamente podem estar no n√≠vel superior. Por exemplo, um controlador (que √© importado dinamicamente no arquivo de rotas) pode ter importa√ß√µes de n√≠vel superior para validadores, arquivos TSX, modelos e servi√ßos, e todos eles se beneficiam do HMR.</p><h2 id="uso" tabindex="-1">Uso <a class="header-anchor" href="#uso" aria-label="Permalink to &quot;Uso&quot;">‚Äã</a></h2><p>Todos os kits iniciais oficiais foram atualizados para usar o HMR por padr√£o. No entanto, se voc√™ tiver um aplicativo existente, poder√° configurar o HMR da seguinte maneira.</p><p>Instale o pacote npm <a href="https://github.com/Julien-R44/hot-hook" target="_blank" rel="noreferrer">hot-hook</a> como uma depend√™ncia de desenvolvimento. A equipe principal do AdonisJS criou este pacote, que tamb√©m pode ser usado fora de um aplicativo AdonisJS.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hot-hook</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Em seguida, copie e cole a seguinte configura√ß√£o no arquivo <code>package.json</code>. A propriedade <code>boundaries</code> aceita uma matriz de padr√µes glob que devem ser considerados para o HMR.</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;hotHook&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;boundaries&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;./app/controllers/**/*.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;./app/middleware/*.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Ap√≥s a configura√ß√£o, voc√™ pode iniciar o servidor de desenvolvimento com o sinalizador <code>--hmr</code>.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serve</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hmr</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Al√©m disso, voc√™ pode querer atualizar o script <code>dev</code> dentro do arquivo <code>package.json</code> para usar este novo sinalizador.</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node ace serve --hmr&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="recargas-completas-vs-hmr" tabindex="-1">Recargas completas vs HMR <a class="header-anchor" href="#recargas-completas-vs-hmr" aria-label="Permalink to &quot;Recargas completas vs HMR&quot;">‚Äã</a></h2><div class="info custom-block"><p class="custom-block-title">NOTA</p><p>Esta se√ß√£o explica o funcionamento subjacente do <code>hot-hook</code>. Sinta-se √† vontade para ignor√°-la se n√£o estiver com vontade de ler teoria t√©cnica estendida ü§ì</p><p>Ou, leia o <a href="https://github.com/Julien-R44/hot-hook" target="_blank" rel="noreferrer">arquivo README</a> do pacote se quiser uma explica√ß√£o ainda mais aprofundada.</p></div><p>Vamos entender quando o AdonisJS executar√° uma recarga completa (reiniciando o processo) e quando ele recarregar√° o m√≥dulo a quente.</p><h3 id="criando-uma-arvore-de-dependencias" tabindex="-1">Criando uma √°rvore de depend√™ncias <a class="header-anchor" href="#criando-uma-arvore-de-dependencias" aria-label="Permalink to &quot;Criando uma √°rvore de depend√™ncias&quot;">‚Äã</a></h3><p>Ao usar o sinalizador <code>--hmr</code>, o AdonisJS usar√° <code>hot-hook</code> para criar uma √°rvore de depend√™ncias do seu aplicativo come√ßando pelo arquivo <code>bin/server.ts</code> e observar√° todos os arquivos que fazem parte dessa √°rvore de depend√™ncias.</p><p>Isso significa que se voc√™ criar um arquivo TypeScript no c√≥digo-fonte do seu aplicativo, mas nunca import√°-lo em nenhum lugar do seu aplicativo, esse arquivo n√£o acionar√° nenhuma recarga. Ele ser√° ignorado como se o arquivo n√£o existisse.</p><h3 id="identificando-limites" tabindex="-1">Identificando limites <a class="header-anchor" href="#identificando-limites" aria-label="Permalink to &quot;Identificando limites&quot;">‚Äã</a></h3><p>Em seguida, <code>hot-hook</code> usar√° o array <code>boundaries</code> da configura√ß√£o para identificar os arquivos que se qualificam para HMR.</p><p>Como regra geral, voc√™ nunca deve registrar arquivos de configura√ß√£o, provedores de servi√ßo ou arquivos de pr√©-carregamento como limites. Isso ocorre porque esses arquivos geralmente resultam em algum efeito colateral que ocorrer√° novamente se os recarregarmos sem limpar os efeitos colaterais. Aqui est√£o alguns exemplos:</p><ul><li><p>O arquivo <code>config/database.ts</code> estabelece uma conex√£o com o banco de dados. Recarregar este arquivo a quente significa fechar a conex√£o existente e recri√°-la. O mesmo pode ser alcan√ßado reiniciando todo o processo sem adicionar nenhuma complexidade adicional.</p></li><li><p>O arquivo <code>start/routes.ts</code> √© usado para registrar as rotas. Recarregar este arquivo a quente significa remover rotas existentes registradas com o framework e registr√°-las novamente. Novamente, reiniciar o processo √© simples.</p></li></ul><p>Em outras palavras, podemos dizer que os m√≥dulos importados/executados durante uma solicita√ß√£o HTTP devem fazer parte dos limites HMR, e os m√≥dulos necess√°rios para inicializar o aplicativo n√£o devem ser.</p><h3 id="executando-recarregamentos" tabindex="-1">Executando recarregamentos <a class="header-anchor" href="#executando-recarregamentos" aria-label="Permalink to &quot;Executando recarregamentos&quot;">‚Äã</a></h3><p>Depois que o <code>hot-hook</code> identificar os limites, ele executar√° o HMR para m√≥dulos importados dinamicamente que fazem parte do limite e reiniciar√° o processo para o restante dos arquivos.</p>`,35)]))}const h=e(r,[["render",n]]);export{u as __pageData,h as default};
