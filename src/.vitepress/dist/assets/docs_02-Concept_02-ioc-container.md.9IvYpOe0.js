import{_ as i,c as a,a2 as e,o as n}from"./chunks/framework.YPpNXepj.js";const c=JSON.parse('{"title":"Contêiner IoC","description":"","frontmatter":{},"headers":[],"relativePath":"docs/02-Concept/02-ioc-container.md","filePath":"docs/02-Concept/02-ioc-container.md"}'),o={name:"docs/02-Concept/02-ioc-container.md"};function t(p,s,l,d,r,h){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="conteiner-ioc" tabindex="-1">Contêiner IoC <a class="header-anchor" href="#conteiner-ioc" aria-label="Permalink to &quot;Contêiner IoC&quot;">​</a></h1><h2 id="introducao" tabindex="-1">Introdução <a class="header-anchor" href="#introducao" aria-label="Permalink to &quot;Introdução&quot;">​</a></h2><p>Antes de entender o uso e os benefícios do contêiner <strong>Inversão de Controle (IoC)</strong>, precisamos dar um passo para trás e entender os problemas de gerenciamento de dependência enfrentados por grandes bases de código.</p><h3 id="abstracoes-inuteis" tabindex="-1">Abstrações inúteis <a class="header-anchor" href="#abstracoes-inuteis" aria-label="Permalink to &quot;Abstrações inúteis&quot;">​</a></h3><p>Muitas vezes você se depara com uma situação em que precisa criar abstrações inúteis para uma biblioteca para gerenciar seu ciclo de vida.</p><p>Por exemplo, para garantir que o banco de dados seja conectado apenas uma vez, você pode mover todo o código de configuração do banco de dados para seu próprio arquivo (por exemplo, <code>lib/database.js</code>) e então <code>require</code> em todos os lugares dentro do seu aplicativo:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .lib/database.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> knex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;knex&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> knex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  client: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mysql&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  connection: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connection</span></span></code></pre></div><p>Agora, em vez de exigir <code>knex</code> diretamente, você pode exigir <code>lib/database.js</code> onde for necessário.</p><p>Isso é bom para uma única dependência, mas conforme o aplicativo cresce, você encontrará vários desses arquivos crescendo dentro do seu código-base, o que não é o ideal.</p><h3 id="gerenciamento-de-dependencias" tabindex="-1">Gerenciamento de dependências <a class="header-anchor" href="#gerenciamento-de-dependencias" aria-label="Permalink to &quot;Gerenciamento de dependências&quot;">​</a></h3><p>Um dos maiores problemas que grandes bases de código sofrem é o gerenciamento de dependências.</p><p>Como as dependências não sabem umas das outras, o desenvolvedor precisa conectá-las de alguma forma.</p><p>Vamos pegar o exemplo de <em>sessões</em> armazenadas em um banco de dados <em>redis</em>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">redis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // precisa de instância Redis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Redis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // precisa de instância de configuração</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">configDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // precisa do caminho do diretório de configuração</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Como você pode ver, a classe <code>Session</code> é dependente da classe <code>Redis</code>, a classe <code>Redis</code> é dependente da classe <code>Config</code> e assim por diante.</p><p>Ao usar a classe <code>Session</code>, temos que construir suas dependências corretamente:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configDirectory)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Redis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> session</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(redis)</span></span></code></pre></div><p>Como a lista de dependências pode aumentar com base nos requisitos do projeto, você pode imaginar rapidamente como esse processo de instanciação sequencial pode começar a sair do controle!</p><p>É aqui que o contêiner IoC vem para o resgate, assumindo a responsabilidade de resolver suas dependências para você.</p><h3 id="testes-dolorosos" tabindex="-1">Testes dolorosos <a class="header-anchor" href="#testes-dolorosos" aria-label="Permalink to &quot;Testes dolorosos&quot;">​</a></h3><p>Quando não estiver usando um contêiner IoC, você precisa inventar maneiras diferentes de simular dependências ou confiar em bibliotecas como <a href="http://sinonjs.org/" target="_blank" rel="noreferrer">sinonjs</a>.</p><p>Ao usar o contêiner IoC, é simples link:testing-fakes#_self_implementing_fakes[criar fakes], já que todas as dependências são resolvidas do contêiner IoC e não do sistema de arquivos diretamente.</p><h2 id="vinculando-dependencias" tabindex="-1">Vinculando dependências <a class="header-anchor" href="#vinculando-dependencias" aria-label="Permalink to &quot;Vinculando dependências&quot;">​</a></h2><p>Digamos que queremos vincular a biblioteca <code>Redis</code> dentro do contêiner IoC, certificando-nos de que ela saiba como se compor.</p><div class="warning custom-block"><p class="custom-block-title">NOTA</p><p>Não há nenhum ingrediente secreto para o contêiner IoC. É uma ideia relativamente simples que controla a composição e a resolução de módulos, abrindo um mundo totalmente novo de possibilidades.</p></div><p>O primeiro passo é criar a implementação real do <code>Redis</code> e definir todas as dependências como parâmetros <code>constructor</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Redis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> redisConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;redis&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // conectar ao servidor redis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Redis</span></span></code></pre></div><p>Observe que <code>Config</code> é uma dependência do construtor e não uma declaração <code>require</code> codificada.</p><p>Em seguida, vamos vincular nossa classe <code>Redis</code> ao contêiner IoC como <code>My/Redis</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ioc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@adonisjs/fold&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./Redis&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ioc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;My/Redis&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Adonis/Src/Config&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Redis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Config)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Podemos então usar nossa vinculação <code>My/Redis</code> assim:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ioc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;My/Redis&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol><li>O método <code>ioc.bind</code> recebe dois parâmetros: + <ul><li>O nome da vinculação (por exemplo, <code>My/Redis</code>)</li><li>Uma função <em>de fábrica</em> executada toda vez que você acessa a vinculação, retornando o valor final para a vinculação</li></ul></li><li>Como estamos usando o contêiner IoC, puxamos todas as vinculações existentes (por exemplo, <code>Config</code>) e as passamos para a classe <code>Redis</code>.</li><li>Finalmente, retornamos uma nova instância de <code>Redis</code>, configurada e pronta para uso.</li></ol><h3 id="singletons" tabindex="-1">Singletons <a class="header-anchor" href="#singletons" aria-label="Permalink to &quot;Singletons&quot;">​</a></h3><p>Há um problema com a vinculação <code>My/Redis</code> que acabamos de criar.</p><p>Cada vez que o buscamos do contêiner IoC, ele retorna uma nova instância <code>Redis</code>, criando uma nova conexão com o servidor Redis.</p><p>Para superar esse problema, o contêiner IoC permite que você defina <strong>singletons</strong>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ioc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;My/Redis&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Adonis/Src/Config&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Redis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Config)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Em vez de usar <code>ioc.bind</code>, usamos <code>ioc.singleton</code>, que armazena em cache seu primeiro valor de retorno e o reutiliza para retornos futuros.</p><h2 id="resolvendo-dependencias" tabindex="-1">Resolvendo dependências <a class="header-anchor" href="#resolvendo-dependencias" aria-label="Permalink to &quot;Resolvendo dependências&quot;">​</a></h2><p>Basta chamar o método <code>ioc.use</code> e ​​dar a ele um namespace para resolver:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ioc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;My/Redis&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>O método global <code>use</code> também pode ser usado:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;My/Redis&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>As etapas executadas ao resolver uma dependência do contêiner IoC são:</p><ol><li>Procure por um fake registrado.</li><li>Em seguida, encontre a ligação real.</li><li>Procure um alias e, se encontrado, repita o processo usando o nome de vinculação real.</li><li>Resolva como um caminho carregado automaticamente.</li><li>Retorne ao método nativo <code>require</code> do Node.js.</li></ol><h3 id="aliases" tabindex="-1">Aliases <a class="header-anchor" href="#aliases" aria-label="Permalink to &quot;Aliases&quot;">​</a></h3><p>Como as vinculações do contêiner IoC devem ser exclusivas, usamos o seguinte padrão para nomes de vinculação: <code>Project/Scope/Module</code>.</p><p>Decompondo, usando <code>Adonis/Src/Config</code> como exemplo:</p><ul><li><code>Adonis</code> é o nome do <strong>Projeto</strong> (pode ser o nome da sua empresa)</li><li><code>Src</code> é o <strong>Escopo</strong>, pois essa vinculação faz parte do núcleo (para pacotes de primeira parte, usamos a palavra-chave <code>Addon</code>)</li><li><code>Config</code> é o nome real do <strong>Módulo</strong></li></ul><p>Como às vezes é difícil lembrar e digitar namespaces completos, o contêiner IoC permite que você defina <em>aliases</em> para eles.</p><p>Aliases são definidos dentro do objeto <code>aliases</code> do arquivo <code>start/app.js</code>.</p><div class="warning custom-block"><p class="custom-block-title">NOTA</p><p>O AdonisJs pré-registra aliases para módulos internos como <code>Route</code>, <code>View</code>, <code>Model</code> e assim por diante. No entanto, você sempre pode substituí-los, conforme mostrado abaixo.</p></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .start/app.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aliases</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  MyRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Adonis/Src/Route&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Route</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyRoute&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="carregamento-automatico" tabindex="-1">Carregamento automático <a class="header-anchor" href="#carregamento-automatico" aria-label="Permalink to &quot;Carregamento automático&quot;">​</a></h3><p>Em vez de apenas vincular dependências ao contêiner IoC, você também pode definir um diretório para ser carregado automaticamente pelo contêiner IoC.</p><p><em>Não se preocupe</em>, ele não carrega todos os arquivos do diretório, mas considera os caminhos do diretório como parte do processo de resolução de dependências.</p><p>Por exemplo, o diretório <code>app</code> do AdonisJs é carregado automaticamente sob o namespace <code>App</code>, o que significa que você pode exigir todos os arquivos do diretório <code>app</code> sem digitar caminhos relativos.</p><p>Por exemplo:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .app/Services/Foo.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FooService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FooService</span></span></code></pre></div><p>Pode ser necessário como:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .app/Controllers/Http/UserController.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;App/Services/Foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Sem o carregamento automático, ele teria que ser necessário como <code>require(&#39;../../Services/Foo&#39;)</code>.</p><p>Então pense no carregamento automático como uma maneira mais legível e consistente de exigir arquivos.</p><p>Além disso, você pode definir facilmente <a href="/original/markdown/10-testing/05-Fakes.html">fakes</a> para eles também.</p><h2 id="faq-s" tabindex="-1">FAQ&#39;s <a class="header-anchor" href="#faq-s" aria-label="Permalink to &quot;FAQ&#39;s&quot;">​</a></h2><h4 id="eu-tenho-que-vincular-tudo-dentro-do-conteiner-ioc" tabindex="-1"><strong>Eu tenho que vincular tudo dentro do contêiner IoC?</strong> <a class="header-anchor" href="#eu-tenho-que-vincular-tudo-dentro-do-conteiner-ioc" aria-label="Permalink to &quot;**Eu tenho que vincular tudo dentro do contêiner IoC?**&quot;">​</a></h4><p>Não. As vinculações do contêiner IoC devem ser usadas somente quando você quiser abstrair a configuração de uma biblioteca/módulo para sua própria coisa. Além disso, considere usar <a href="/original/markdown/02-Concept/03-service-providers.html">provedores de serviço</a> quando quiser distribuir dependências e quiser que elas funcionem bem com o ecossistema AdonisJs.</p><h4 id="como-faco-para-simular-vinculacoes" tabindex="-1"><strong>Como faço para simular vinculações?</strong> <a class="header-anchor" href="#como-faco-para-simular-vinculacoes" aria-label="Permalink to &quot;**Como faço para simular vinculações?**&quot;">​</a></h4><p>Não há necessidade de simular vinculações, pois o AdonisJs permite que você implemente <em>fakes</em>. Saiba mais sobre fakes <a href="/original/markdown/10-testing/05-Fakes.html">aqui</a>.</p><h4 id="como-encapsular-um-modulo-npm-como-um-provedor-de-servicos" tabindex="-1"><strong>Como encapsular um módulo npm como um provedor de serviços?</strong> <a class="header-anchor" href="#como-encapsular-um-modulo-npm-como-um-provedor-de-servicos" aria-label="Permalink to &quot;**Como encapsular um módulo npm como um provedor de serviços?**&quot;">​</a></h4><p><a href="/original/markdown/02-Concept/03-service-providers.html">Aqui está</a> o guia completo para isso.</p>`,73)]))}const g=i(o,[["render",t]]);export{c as __pageData,g as default};
