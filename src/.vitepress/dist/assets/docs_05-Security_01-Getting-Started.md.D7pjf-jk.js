import{_ as a,c as i,a2 as e,o}from"./chunks/framework.YPpNXepj.js";const k=JSON.parse('{"title":"Introdução","description":"","frontmatter":{},"headers":[],"relativePath":"docs/05-Security/01-Getting-Started.md","filePath":"docs/05-Security/01-Getting-Started.md"}'),n={name:"docs/05-Security/01-Getting-Started.md"};function t(d,s,p,l,r,h){return o(),i("div",null,s[0]||(s[0]=[e(`<h1 id="introducao" tabindex="-1">Introdução <a class="header-anchor" href="#introducao" aria-label="Permalink to &quot;Introdução&quot;">​</a></h1><p>O AdonisJs fornece um punhado de ferramentas para manter seus sites seguros contra ataques comuns da web.</p><p>Neste guia, aprendemos sobre as melhores práticas para manter seus aplicativos AdonisJs seguros.</p><div class="danger custom-block"><p class="custom-block-title">OBSERVAÇÃO</p><p>Se você descobrir algum bug de segurança, <a href="mailto:virk@adonisjs.com" target="_blank" rel="noreferrer">informe-nos imediatamente por e-mail</a>. Não crie problemas no GitHub, pois isso pode afetar os aplicativos em execução na produção. Os problemas encontrados serão divulgados assim que os patches forem enviados para a base de código.</p></div><h2 id="seguranca-da-sessao" tabindex="-1">Segurança da sessão <a class="header-anchor" href="#seguranca-da-sessao" aria-label="Permalink to &quot;Segurança da sessão&quot;">​</a></h2><p>As sessões podem vazar informações importantes se não forem tratadas com cuidado.</p><p>O AdonisJs criptografa e assina todos os cookies usando a <code>appKey</code> definida no arquivo <code>config/app.js</code>.</p><p>Mantenha sua <code>appKey</code> em segredo – não a compartilhe com ninguém e nunca a envie para sistemas de controle de versão como o Github.</p><h3 id="configuracao-da-sessao" tabindex="-1">Configuração da sessão <a class="header-anchor" href="#configuracao-da-sessao" aria-label="Permalink to &quot;Configuração da sessão&quot;">​</a></h3><p>A configuração da sessão é salva dentro do arquivo <code>config/session.js</code>.</p><p>Ao atualizar sua configuração de sessão, considere as seguintes sugestões:</p><ul><li>O valor <code>httpOnly</code> deve ser definido como <code>true</code>, pois defini-lo como <code>false</code> tornará seus cookies acessíveis via JavaScript usando <code>document.cookie</code>.</li><li>O valor <code>sameSite</code> também deve ser definido como <code>true</code>, garantindo que seu cookie de sessão não seja visível/acessível por meio de domínios diferentes.</li></ul><h2 id="spoofing-de-metodo-de-formulario" tabindex="-1">Spoofing de método de formulário <a class="header-anchor" href="#spoofing-de-metodo-de-formulario" aria-label="Permalink to &quot;Spoofing de método de formulário&quot;">​</a></h2><p>Como os formulários HTML só são capazes de fazer solicitações <code>GET</code> e <code>POST</code>, você não pode usar verbos HTTP como <code>PUT</code> ou <code>DELETE</code> para executar operações engenhosas por meio do atributo <code>method</code> de um formulário.</p><p>Para contornar isso, o AdonisJs implementa <a href="/docs/04-Basics/04-Request.html">form method spoofing</a>, permitindo que você envie seu método HTTP pretendido por meio do parâmetro de string de consulta <code>_method</code> da URL de solicitação:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .Route</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Route.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/users/:id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;UserController.update&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- .View --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/users/1?_method=PUT&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>No exemplo acima, anexar <code>?_method=PUT</code> à URL <code>action</code> do formulário converte o método HTTP de solicitação de <code>POST</code> para <code>PUT</code>.</p><p>Aqui estão algumas coisas que você deve saber sobre spoofing de método:</p><ul><li>O AdonisJs apenas falsifica métodos em que o método HTTP de origem é <code>POST</code>, o que significa que solicitações <code>GET</code> que passam por um <code>_method</code> HTTP pretendido não são falsificadas.</li><li>O spoofing de método pode ser desabilitado configurando <code>allowMethodSpoofing</code> como <code>false</code> dentro do arquivo <code>config/app.js</code>:<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .config/app.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  allowMethodSpoofing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="uploads-de-arquivo" tabindex="-1">Uploads de arquivo <a class="header-anchor" href="#uploads-de-arquivo" aria-label="Permalink to &quot;Uploads de arquivo&quot;">​</a></h2><p>Os invasores geralmente tentam fazer upload de arquivos maliciosos para servidores para depois executar e obter acesso aos servidores para realizar algum tipo de atividade destrutiva.</p><p>Além de fazer upload de arquivos maliciosos, os invasores também podem tentar fazer upload de arquivos <em>enormes</em> para que seu servidor fique ocupado fazendo upload e comece a lançar erros de <em>TEMPO LIMITE</em> para solicitações subsequentes.</p><p>Para combater esse cenário, o AdonisJs permite que você defina o <em>tamanho máximo de upload</em> processável pelo seu servidor. Isso significa que qualquer arquivo maior que o <code>maxSize</code> especificado é negado, mantendo seu servidor em um estado saudável.</p><p>Defina seu valor <code>maxSize</code> dentro do arquivo <code>config/bodyParser.js</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .config/bodyParser.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uploads</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  maxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2mb&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Aqui estão algumas dicas a serem consideradas ao lidar com uploads de arquivos:</p><ul><li>Renomeie os arquivos do usuário antes de fazer upload/armazenar.</li><li>Não armazene os arquivos enviados dentro do diretório <code>public</code>, pois os arquivos <code>public</code> podem ser acessados ​​diretamente.</li><li>Não compartilhe a localização real dos arquivos enviados com seus usuários. Em vez disso, considere salvar uma referência aos caminhos dos arquivos enviados em seu banco de dados (cada arquivo tendo um <em>id exclusivo</em>) e configure uma rota para servir esses arquivos enviados via <code>id</code>, assim:<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .start/routes.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Helpers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Helpers&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Route.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;download/:fileId&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findorFail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params.fileId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">download</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Helpers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tmpPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;uploads/\${file.path}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li></ul>`,28)]))}const u=a(n,[["render",t]]);export{k as __pageData,u as default};
