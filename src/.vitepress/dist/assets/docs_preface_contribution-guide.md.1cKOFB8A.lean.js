import{_ as a,c as o,a2 as s,o as r}from"./chunks/framework.Dz7_3PEu.js";const m=JSON.parse('{"title":"Contribuindo","description":"","frontmatter":{"summary":"Contribuir para projetos AdonisJS é uma ótima maneira de retribuir à comunidade. Este guia fornece uma visão geral de como você pode contribuir para qualquer projeto AdonisJS."},"headers":[],"relativePath":"docs/preface/contribution-guide.md","filePath":"docs/preface/contribution-guide.md"}'),t={name:"docs/preface/contribution-guide.md"};function i(n,e,d,c,l,p){return r(),o("div",null,e[0]||(e[0]=[s(`<h1 id="contribuindo" tabindex="-1">Contribuindo <a class="header-anchor" href="#contribuindo" aria-label="Permalink to &quot;Contribuindo&quot;">​</a></h1><p>Este é um guia geral de contribuição para todos os repositórios <a href="https://github.com/adonisjs" target="_blank" rel="noreferrer">AdonisJS</a>. Leia este guia cuidadosamente antes de contribuir para qualquer um dos repositórios 🙏</p><p>O código não é a única maneira de contribuir. A seguir estão algumas maneiras de contribuir e se tornar parte da comunidade.</p><ul><li>Corrigindo erros de digitação na documentação</li><li>Melhorando documentos existentes</li><li>Escrevendo livros de receitas ou postagens de blog para educar outras pessoas na comunidade</li><li>Triagem de problemas</li><li>Compartilhando sua opinião sobre problemas existentes</li><li>Ajude a comunidade no Discord e no fórum de discussões</li></ul><h2 id="relatando-bugs" tabindex="-1">Relatando bugs <a class="header-anchor" href="#relatando-bugs" aria-label="Permalink to &quot;Relatando bugs&quot;">​</a></h2><p>Muitos problemas relatados em projetos de código aberto geralmente são perguntas ou configurações incorretas do lado do relator. Portanto, recomendamos fortemente que você solucione seus problemas adequadamente antes de relatá-los.</p><p>Se você estiver relatando um bug, inclua o máximo de informações possível com os exemplos de código que você escreveu. A escala de problemas bons para ruins é a seguinte.</p><ul><li><strong>PROBLEMA PERFEITO</strong>: Você isola o bug subjacente. Cria um teste com falha no repositório e abre um problema do Github em torno dele. <a href="https://antfu.me/posts/why-reproductions-are-required" target="_blank" rel="noreferrer">Por que as reproduções são necessárias</a>.</li><li><strong>PROBLEMA DECENTE</strong>: Você declara corretamente seu problema. Compartilhe o código que produz o problema em primeiro lugar. Além disso, inclua os arquivos de configuração relacionados e a versão do pacote que você usa.</li></ul><p>Por último, mas não menos importante, é formatar cada bloco de código corretamente seguindo o <a href="https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax" target="_blank" rel="noreferrer">guia de sintaxe de markdown do Github</a>.</p><p><em>-</em> <strong>PROBLEMA RUIM</strong>: Você descarta a pergunta que tem na esperança de que a outra pessoa faça as perguntas relevantes e o ajude. Esses tipos de problemas são fechados automaticamente sem nenhuma explicação.</p><h2 id="tendo-uma-discussao" tabindex="-1">Tendo uma discussão <a class="header-anchor" href="#tendo-uma-discussao" aria-label="Permalink to &quot;Tendo uma discussão&quot;">​</a></h2><p>Você geralmente quer discutir um tópico ou talvez compartilhar algumas ideias. Nesse caso, crie uma discussão no fórum de discussões na categoria <strong>💡Ideias</strong>.</p><h2 id="educando-outros" tabindex="-1">Educando outros <a class="header-anchor" href="#educando-outros" aria-label="Permalink to &quot;Educando outros&quot;">​</a></h2><p>Educar outros é uma das melhores maneiras de contribuir para qualquer comunidade e ganhar reconhecimento.</p><p>Você pode usar a categoria <strong>📚 Cookbooks</strong> em nosso fórum de discussão para compartilhar um artigo com outras pessoas. A seção de cookbooks NÃO é estritamente moderada, exceto que o conhecimento compartilhado deve ser relevante para o projeto.</p><h2 id="criando-solicitacoes-de-pull" tabindex="-1">Criando solicitações de pull <a class="header-anchor" href="#criando-solicitacoes-de-pull" aria-label="Permalink to &quot;Criando solicitações de pull&quot;">​</a></h2><p>Nunca é uma boa experiência ter sua solicitação de pull recusada depois de investir muito tempo e esforço escrevendo o código. Portanto, recomendamos fortemente que você <a href="https://github.com/orgs/adonisjs/discussions" target="_blank" rel="noreferrer">inicie uma discussão</a> antes de começar qualquer novo trabalho do seu lado.</p><p>Basta iniciar uma discussão e explicar o que você está planejando contribuir?</p><ul><li><p><strong>Você está tentando criar um PR para corrigir um bug</strong>: PRs para bugs são aceitos principalmente depois que o bug foi confirmado.</p></li><li><p><strong>Você está planejando adicionar um novo recurso</strong>: Explique detalhadamente por que esse recurso é necessário e compartilhe links para o material de aprendizagem que podemos ler para nos educar.</p><p>Por exemplo: Se você estiver adicionando suporte para testes de snapshot para Japa ou AdonisJS. Então compartilhe os links que eu posso usar para aprender mais sobre testes de snapshot em geral.</p></li></ul><blockquote><p>Nota: Você também deve estar disponível para abrir PRs adicionais para documentar o recurso ou melhoria contribuídos.</p></blockquote><h2 id="configuracao-do-repositorio" tabindex="-1">Configuração do repositório <a class="header-anchor" href="#configuracao-do-repositorio" aria-label="Permalink to &quot;Configuração do repositório&quot;">​</a></h2><ol><li><p>Comece clonando o repositório em sua máquina local.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">REPO_UR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>Instale dependências no seu local. Não atualize nenhuma dependência junto com uma solicitação de recurso. Se você encontrar dependências obsoletas, crie um PR separado para atualizá-las.</p><p>Usamos <code>npm</code> para gerenciar dependências, portanto não use <code>yarn</code> ou qualquer outra ferramenta.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>Execute os testes executando o seguinte comando.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><h2 id="ferramentas-em-uso" tabindex="-1">Ferramentas em uso <a class="header-anchor" href="#ferramentas-em-uso" aria-label="Permalink to &quot;Ferramentas em uso&quot;">​</a></h2><p>A seguir está a lista de ferramentas em uso.</p><table tabindex="0"><thead><tr><th>Ferramenta</th><th>Uso</th></tr></thead><tbody><tr><td>TypeScript</td><td>Todos os repositórios são criados em TypeScript. O JavaScript compilado e as definições de tipo são publicados no npm.</td></tr><tr><td>TS Node</td><td>Usamos <a href="https://typestrong.org/ts-node/" target="_blank" rel="noreferrer">ts-node</a> para executar testes ou scripts sem compilar TypeScript. O objetivo principal do ts-node é ter um loop de feedback mais rápido durante o desenvolvimento</td></tr><tr><td>SWC</td><td><a href="https://swc.rs/" target="_blank" rel="noreferrer">SWC</a> é um compilador TypeScript baseado em Rust. O TS Node vem com suporte de primeira classe para usar SWC em vez do compilador oficial TypeScript. O principal motivo para usar SWC é o ganho de velocidade.</td></tr><tr><td>Release-It</td><td>Usamos <a href="https://github.com/release-it/release-it" target="_blank" rel="noreferrer">release-it</a> para publicar nossos pacotes no npm. Ele faz todo o trabalho pesado de criar uma versão e publica no npm e no Github. Sua configuração é definida no arquivo <code>package.json</code>.</td></tr><tr><td>ESLint</td><td>O ESLint nos ajuda a impor um estilo de codificação consistente em todos os repositórios com vários colaboradores. Todas as nossas regras ESLint são publicadas no pacote <a href="https://github.com/adonisjs-community/eslint-plugin-adonis" target="_blank" rel="noreferrer">eslint-plugin-adonis</a>.</td></tr><tr><td>Prettier</td><td>Usamos o prettier para formatar a base de código para uma saída visual consistente. Se você está confuso sobre o motivo de usarmos o ESLint e o Prettier, leia o documento <a href="https://prettier.io/docs/en/comparison.html" target="_blank" rel="noreferrer">Prettier vs. Linters</a> no site do Prettier.</td></tr><tr><td>EditorConfig</td><td>O arquivo <code>.editorconfig</code> na raiz de cada projeto configura seu editor de código para usar um conjunto de regras para recuo e gerenciamento de espaços em branco. Novamente, o Prettier é usado para pós-formatar seu código, e o Editorconfig é usado para configurar o editor com antecedência.</td></tr><tr><td>Conventional Changelog</td><td>Todos os commits em todos os repositórios usam <a href="https://github.com/conventional-changelog/commitlint/#what-is-commitlint" target="_blank" rel="noreferrer">commitlint</a> para impor mensagens de commit consistentes.</td></tr><tr><td>Husky</td><td>Usamos <a href="https://typicode.github.io/husky/#/" target="_blank" rel="noreferrer">husky</a> para impor convenções de commit ao fazer commit do código. Husky é um sistema de hooks git escrito em Node</td></tr></tbody></table><h2 id="comandos" tabindex="-1">Comandos <a class="header-anchor" href="#comandos" aria-label="Permalink to &quot;Comandos&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Comando</th><th>Descrição</th></tr></thead><tbody><tr><td><code>npm run test</code></td><td>Execute testes de projeto usando <code>ts-node</code></td></tr><tr><td><code>npm run compile</code></td><td>Compile o projeto TypeScript para JavaScript. A saída compilada é escrita dentro do diretório <code>build</code></td></tr><tr><td><code>npm run release</code></td><td>Inicie o processo de lançamento usando <code>np</code></td></tr><tr><td><code>npm run lint</code></td><td>Lint a base de código usando ESlint</td></tr><tr><td><code>npm run format</code></td><td>Formate a base de código usando Prettier</td></tr><tr><td><code>npm run sync-labels</code></td><td>Sincronize os rótulos definidos dentro do arquivo <code>.github/labels.json</code> com o Github. Este comando é somente para o administrador do projeto.</td></tr></tbody></table><h2 id="estilo-de-codificacao" tabindex="-1">Estilo de codificação <a class="header-anchor" href="#estilo-de-codificacao" aria-label="Permalink to &quot;Estilo de codificação&quot;">​</a></h2><p>Todos os nossos projetos são escritos em TypeScript e estão migrando para ESM puro.</p><p><a href="https://github.com/thetutlage/meta/discussions/3" target="_blank" rel="noreferrer">meu estilo de codificação aqui</a><a href="https://github.com/thetutlage/meta/discussions/2" target="_blank" rel="noreferrer">ESM e TypeScript aqui</a></p><p>Além disso, certifique-se de executar os seguintes comandos antes de enviar o código.</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Formatos usando prettier</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> format</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Lints usando Eslint</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="sendo-reconhecido-como-um-colaborador" tabindex="-1">Sendo reconhecido como um colaborador <a class="header-anchor" href="#sendo-reconhecido-como-um-colaborador" aria-label="Permalink to &quot;Sendo reconhecido como um colaborador&quot;">​</a></h2><p>Contamos com o GitHub para listar todos os colaboradores do repositório no painel do lado direito do repositório. A seguir, um exemplo do mesmo.</p><p>Além disso, usamos o recurso <a href="https://docs.github.com/en/repositories/releasing-projects-on-github/automatically-generated-release-notes#about-automatically-generated-release-notes" target="_blank" rel="noreferrer">geração automática de notas de versão</a> do Github, que adiciona uma referência ao perfil do colaborador nas notas de versão.</p>`,35)]))}const h=a(t,[["render",i]]);export{m as __pageData,h as default};
