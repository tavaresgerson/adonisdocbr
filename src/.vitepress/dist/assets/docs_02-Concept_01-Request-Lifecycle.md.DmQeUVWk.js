import{_ as e,c as a,a2 as i,o}from"./chunks/framework.YPpNXepj.js";const k=JSON.parse('{"title":"Ciclo de vida da solicitação","description":"","frontmatter":{},"headers":[],"relativePath":"docs/02-Concept/01-Request-Lifecycle.md","filePath":"docs/02-Concept/01-Request-Lifecycle.md"}'),t={name:"docs/02-Concept/01-Request-Lifecycle.md"};function n(l,s,d,r,p,c){return o(),a("div",null,s[0]||(s[0]=[i(`<h1 id="ciclo-de-vida-da-solicitacao" tabindex="-1">Ciclo de vida da solicitação <a class="header-anchor" href="#ciclo-de-vida-da-solicitacao" aria-label="Permalink to &quot;Ciclo de vida da solicitação&quot;">​</a></h1><h2 id="introducao" tabindex="-1">Introdução <a class="header-anchor" href="#introducao" aria-label="Permalink to &quot;Introdução&quot;">​</a></h2><p>A plataforma Node.js é assíncrona. Para iniciantes, pode ser difícil entender como ela funciona e como lidar com sua abordagem não bloqueante para o fluxo do aplicativo.</p><p>Também pode ser confuso diferenciar o JavaScript que você escreve para seu front-end do JavaScript que você escreve para seu back-end. Eles são os mesmos em termos de sintaxe, mas não são executados no mesmo tempo de execução e contexto.</p><p>Ter uma excelente visão geral de alto nível do ciclo de vida da solicitação é essencial. O AdonisJs parecerá menos &quot;mágico&quot; e você estará mais confiante sobre a construção de seus aplicativos.</p><h2 id="fluxo-de-solicitacao" tabindex="-1">Fluxo de solicitação <a class="header-anchor" href="#fluxo-de-solicitacao" aria-label="Permalink to &quot;Fluxo de solicitação&quot;">​</a></h2><p>As solicitações HTTP enviadas de um cliente são manipuladas pelo módulo <code>Server</code> do AdonisJs, executando todo o <strong>middleware de nível de servidor</strong> (por exemplo, o <code>StaticFileMiddleware</code> que serve arquivos estáticos do diretório <code>public</code>).</p><p>Se a solicitação não for encerrada pelo middleware de nível de servidor, o <code>Router</code> do AdonisJs entra em ação. Ele tenta encontrar uma rota que corresponda à URL solicitada. Se <code>Router</code> não puder encontrar uma correspondência, uma exceção <code>RouteNotFound</code> será lançada.</p><p>Após encontrar uma rota correspondente, todos os <strong>middlewares globais</strong> são executados seguidos por qualquer <strong>middleware nomeado</strong> definido para a rota correspondente. Se nenhum middleware global ou nomeado encerrar a solicitação, o manipulador de rota correspondente será chamado.</p><p>Você deve encerrar a solicitação em seu manipulador de rota. Uma vez encerrado, o AdonisJs executa todos os <strong>middlewares downstream</strong> e envia a resposta de volta ao cliente.</p><h2 id="contexto-http" tabindex="-1">Contexto HTTP <a class="header-anchor" href="#contexto-http" aria-label="Permalink to &quot;Contexto HTTP&quot;">​</a></h2><p>O AdonisJs fornece um objeto <strong>Contexto HTTP</strong> para cada manipulador de rota.</p><p>Este objeto contém tudo o que você precisa para manipular a solicitação, como a classe <code>request</code> ou <code>response</code>, e pode ser facilmente estendido via link:service-providers[Providers] ou link:middleware[Middleware]:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .start/routes.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Route.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // request</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // response</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // view</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Alternativamente, você pode usá-lo diretamente em vez de descompactá-lo:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .start/routes.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Route.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ctx.request</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ctx.response</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ctx.view</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // etc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div>`,16)]))}const u=e(t,[["render",n]]);export{k as __pageData,u as default};
